#pragma once

#include <Arduino.h>
#include <vector>
#include <queue>
#include "TaskBase.h"
#include "config.h"
#include "logger.h"
#include "encoder.h"
#include "motor.h"
#include "axis.h"
#include "reflector.h"
#include "WallDetector.h"
#include "SpeedController.h"

#define FAST_WALL_AVOID         true
#define FAST_WALL_AVOID_GAIN    0.00002f

#define FAST_RUN_TASK_PRIORITY  3
#define FAST_RUN_STACK_SIZE     8192

#define FAST_RUN_PERIOD         1000

#define FAST_LOOK_AHEAD         12
#define FAST_PROP_GAIN          15

//#define printf  lg.printf

class FastTrajectory {
  public:
    FastTrajectory() {
      reset();
    }
    virtual ~FastTrajectory() {
    }
    void reset() {
      last_index = -FAST_LOOK_AHEAD;
    }
    Position getNextDir(const Position &cur) {
      int index_cur = getNextIndex(cur);
      int look_ahead = FAST_LOOK_AHEAD;
      Position dir = (getPosition(index_cur + look_ahead) - cur).rotate(-cur.theta);
      dir.theta = atan2f(dir.y, dir.x);
      return dir;
    }
    float getRemain() const {
      return (getSize() - last_index) * interval;
    }
    Position getEndPosition() {
      return getPosition(getSize());
    }
  protected:
    int last_index;
    const float interval = 1.0f;
    virtual int size() const {
      return 180;
    }
    virtual Position position(int index) const {
      return Position(index * interval, 0, 0);
    }
    int getSize() const {
      return size();
    }
    Position getPosition(const int index) {
      return position(index);
    }
    int getNextIndex(const Position& pos) {
      for (int i = last_index;; i++) {
        Position target = getPosition(i);
        Position dir = (target - pos).rotate(-target.theta);
        if (dir.x > 0) {
          last_index = i;
          return last_index;
        }
      }
      return last_index;
    }
};

class F45: public FastTrajectory {
  public:
    F45(bool mirror = false) : mirror(mirror) {}
    const float velocity = 833.4285399219866f;
    const float straight = 18.639610409494697f;
  private:
    bool mirror;
    virtual int size() const {
      return 88;
    }
    virtual Position position(int index) const {
      static const float data[88 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999998, 0.0000019585, 0.0000078333}, {1.9999999985, 0.0000311571, 0.0000625652}, {2.9999999920, 0.0001582831, 0.0002110125}, {3.9999999202, 0.0005001910, 0.0004994001}, {4.9999985938, 0.0012191476, 0.0009730994}, {5.9999966223, 0.0025228322, 0.0016766289}, {6.9999944462, 0.0046594723, 0.0026530842}, {7.9999904560, 0.0079262771, 0.0039446013}, {8.9999809919, 0.0126640587, 0.0055918927}, {9.9999603440, 0.0192477632, 0.0076333691}, {10.9999207524, 0.0280864709, 0.0101051396}, {11.9998524069, 0.0396233961, 0.0130410112}, {12.9997426501, 0.0543358873, 0.0164724895}, {13.9995693943, 0.0727354273, 0.0204287780}, {14.9993103940, 0.0953661656, 0.0249367200}, {15.9989343682, 0.1227840527, 0.0300196860}, {16.9983984521, 0.1555812504, 0.0356982161}, {17.9976481968, 0.1943665837, 0.0419898098}, {18.9966175700, 0.2397566666, 0.0489086545}, {19.9952289555, 0.2923759012, 0.0564656246}, {20.9933931530, 0.3528564779, 0.0646682825}, {21.9910069361, 0.4218383758, 0.0735208777}, {22.9879449489, 0.4999693623, 0.0830243474}, {23.9840668026, 0.5878976082, 0.0931763506}, {24.9792129472, 0.6862492011, 0.1039710426}, {25.9732042339, 0.7956579321, 0.1153989022}, {26.9658419151, 0.9167361326, 0.1274473112}, {27.9569076446, 1.0500713892, 0.1401005926}, {28.9461634776, 1.1962265434, 0.1533400099}, {29.9333518705, 1.3557396923, 0.1671437674}, {30.9182004410, 1.5291241878, 0.1814870102}, {31.9004128541, 1.7168686374, 0.1963418243}, {32.8796732522, 1.9194235282, 0.2116779193}, {33.8556569144, 2.1371920748, 0.2274624490}, {34.8280302607, 2.3705448391, 0.2436596426}, {35.7964508524, 2.6198043716, 0.2602320814}, {36.7605673915, 2.8852450727, 0.2771407081}, {37.7200197214, 3.1670931923, 0.2943448267}, {38.6744400937, 3.4655268303, 0.3118021028}, {39.6234755001, 3.7806759360, 0.3294685631}, {40.5667648457, 4.1126223572, 0.3472986465}, {41.5039563059, 4.4613970710, 0.3652468908}, {42.4347168542, 4.8269714206, 0.3832664544}, {43.3587322616, 5.2092681807, 0.4013100288}, {44.2757070970, 5.6081643566, 0.4193307129}, {45.1853647271, 6.0234911845, 0.4372820126}, {46.0874473161, 6.4550341312, 0.4551178410}, {46.9817199644, 6.9025328941, 0.4727925187}, {47.8679908783, 7.3656814016, 0.4902607732}, {48.7460941704, 7.8441315102, 0.5074780421}, {49.6158994710, 8.3375090304, 0.5244021345}, {50.4773137482, 8.8453903707, 0.5409914404}, {51.3302813084, 9.3673269301, 0.5572063557}, {52.1747837960, 9.9028491765, 0.5730095740}, {53.0108401932, 10.4514666472, 0.5883660865}, {53.8385068205, 11.0126679479, 0.6032431822}, {54.6578745375, 11.5859207537, 0.6176104479}, {55.4690767159, 12.1706718084, 0.6314397679}, {56.2722868463, 12.7663579389, 0.6447057934}, {57.0677065610, 13.3724180765, 0.6573866927}, {57.8555655338, 13.9882746227, 0.6694632617}, {58.6361214806, 14.6133543031, 0.6809195841}, {59.4096601593, 15.2470888023, 0.6917430548}, {60.1764953695, 15.8889147636, 0.7019243803}, {60.9369684318, 16.5382737894, 0.7114575784}, {61.6914265874, 17.1946124408, 0.7203399783}, {62.4402423114, 17.8573823374, 0.7285722194}, {63.1838010817, 18.5260537001, 0.7361582195}, {63.9224886369, 19.2001103322, 0.7431056806}, {64.6566909771, 19.8790488154, 0.7494256150}, {65.3867943634, 20.5623862868, 0.7551320963}, {66.1131853180, 21.2496604380, 0.7602422600}, {66.8362506240, 21.9404295156, 0.7647763031}, {67.5563737589, 22.6342723209, 0.7687574841}, {68.2739115977, 23.3307882102, 0.7722121232}, {68.9892170519, 24.0295980539, 0.7751694646}, {69.7026228066, 24.7303532456, 0.7776606918}, {70.4144372623, 25.4327273129, 0.7797203569}, {71.1249445348, 26.1364215286, 0.7813850097}, {71.8344044556, 26.8411669704, 0.7826928437}, {72.5430525714, 27.5467245204, 0.7836836956}, {73.2511001444, 28.2528848649, 0.7843990459}, {73.9587302172, 28.9594684951, 0.7848820185}, {74.6660879391, 29.6663257063, 0.7851773808}, {75.3732895753, 30.3733378848, 0.7853311575}, {76.0804189779, 31.0804220794, 0.7853892067}, {76.7875273593, 31.7875272061, 0.7853981599}, {76.8198050808, 31.8198050808, 0.7853981634},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F90: public FastTrajectory {
  public:
    F90(bool mirror = false) : mirror(mirror) {}
    //    const float velocity = 914.3857602279614f;
    const float velocity = 800.0f;
    const float straight = 10.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 137;
    }
    virtual Position position(int index) const {
      static const float data[137 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999999, 0.0000011834, 0.0000047332}, {1.9999999995, 0.0000188763, 0.0000378499}, {2.9999999971, 0.0000957380, 0.0001276554}, {3.9999999731, 0.0003025602, 0.0003022989}, {4.9999998040, 0.0007380250, 0.0005896957}, {5.9999994718, 0.0015287046, 0.0010174506}, {6.9999987062, 0.0028284625, 0.0016127816}, {7.9999967859, 0.0048186899, 0.0024024453}, {8.9999925385, 0.0077071168, 0.0034126626}, {9.9999843227, 0.0117267369, 0.0046690468}, {10.9999693610, 0.0171358081, 0.0061965332}, {11.9999441388, 0.0242178373, 0.0080193101}, {12.9999031751, 0.0332797561, 0.0101607521}, {13.9998384740, 0.0446521484, 0.0126433563}, {14.9997395252, 0.0586871725, 0.0154886795}, {15.9995932145, 0.0757570408, 0.0187172793}, {16.9993821792, 0.0962540204, 0.0223486575}, {17.9990853648, 0.1205903467, 0.0264012060}, {18.9986757929, 0.1491952075, 0.0308921567}, {19.9981198183, 0.1825153536, 0.0358375335}, {20.9973771286, 0.2210117396, 0.0412521082}, {21.9964005236, 0.2651579006, 0.0471493602}, {22.9951334240, 0.3154399528, 0.0535414391}, {23.9935104806, 0.3723563445, 0.0604391311}, {24.9914549020, 0.4364136840, 0.0678518295}, {25.9888777968, 0.5081278123, 0.0757875088}, {26.9856781728, 0.5880191211, 0.0842527026}, {27.9817426143, 0.6766110287, 0.0932524857}, {28.9769426997, 0.7744299806, 0.1027904602}, {29.9711354793, 0.8820049268, 0.1128687454}, {30.9641615439, 0.9998621843, 0.1234879719}, {31.9558446591, 1.1285268315, 0.1346472802}, {32.9459917650, 1.2685170254, 0.1463443228}, {33.9343927854, 1.4203427393, 0.1585752707}, {34.9208190518, 1.5845057622, 0.1713348240}, {35.9050235343, 1.7614988306, 0.1846162266}, {36.8867409534, 1.9518000355, 0.1984112844}, {37.8656877330, 2.1558742398, 0.2127103886}, {38.8415620009, 2.3741672994, 0.2275025413}, {39.8140440112, 2.6071051862, 0.2427753866}, {40.7827964482, 2.8550939879, 0.2585152441}, {41.7474645452, 3.1185187916, 0.2747071467}, {42.7076789310, 3.3977385614, 0.2913348822}, {43.6630557681, 3.6930872963, 0.3083810374}, {44.6131967530, 4.0048695712, 0.3258270465}, {45.5576907322, 4.3333600796, 0.3436532420}, {46.4961159599, 4.6788036343, 0.3618389091}, {47.4280405041, 5.0414142231, 0.3803623424}, {48.3530273485, 5.4213714610, 0.3992009063}, {49.2706345390, 5.8188214634, 0.4183310968}, {50.1804151837, 6.2338750665, 0.4377286064}, {51.0819205695, 6.6666076968, 0.4573683914}, {51.9747034604, 7.1170593704, 0.4772247403}, {52.8583191806, 7.5852346588, 0.4972713452}, {53.7323313848, 8.0711014359, 0.5174813739}, {54.5963121186, 8.5745918455, 0.5378275442}, {55.4498418183, 9.0956036128, 0.5582821984}, {56.2925126658, 9.6340000614, 0.5788173804}, {57.1239346241, 10.1896101127, 0.5994049120}, {57.9437346441, 10.7622291089, 0.6200164878}, {58.7515570936, 11.3516249669, 0.6406309339}, {59.5470586966, 11.9575472290, 0.6612453799}, {60.3299014116, 12.5797384137, 0.6818598260}, {61.0997525783, 13.2179341278, 0.7024742720}, {61.8562850547, 13.8718631753, 0.7230887181}, {62.5991773604, 14.5412476760, 0.7437031641}, {63.3281138104, 15.2258031812, 0.7643176102}, {64.0427846498, 15.9252387953, 0.7849320562}, {64.7428861868, 16.6392573008, 0.8055465023}, {65.4281209192, 17.3675552814, 0.8261609483}, {66.0981976638, 18.1098232546, 0.8467753944}, {66.7528316777, 18.8657458005, 0.8673898404}, {67.3917447803, 19.6350016972, 0.8880042865}, {68.0146654723, 20.4172640571, 0.9086187325}, {68.6213290486, 21.2122004646, 0.9292331786}, {69.2114777143, 22.0194731201, 0.9498476246}, {69.7848610908, 22.8387387046, 0.9704596363}, {70.3412448951, 23.6696435130, 0.9910488666}, {70.8804236474, 24.5118139194, 1.0115870256}, {71.4022249152, 25.3648596954, 1.0320459270}, {71.9065103813, 26.2283765121, 1.0523976026}, {72.3931758437, 27.1019459401, 1.0726143799}, {72.8621518604, 27.9851388725, 1.0926689580}, {73.3134052872, 28.8775166765, 1.1125344827}, {73.7469386997, 29.7786352160, 1.1321846208}, {74.1627903319, 30.6880492306, 1.1515936324}, {74.5610340765, 31.6053123358, 1.1707364420}, {74.9417794850, 32.5299770231, 1.1895887073}, {75.3051705443, 33.4615988916, 1.2081268867}, {75.6513863516, 34.3997392900, 1.2263283039}, {75.9806389139, 35.3439665490, 1.2441712100}, {76.2931709662, 36.2938597430, 1.2616348444}, {76.5892559719, 37.2490086901, 1.2786994908}, {76.8691981228, 38.2090139525, 1.2953465326}, {77.1333292913, 39.1734894447, 1.3115585034}, {77.3820083828, 40.1420647309, 1.3273191357}, {77.6156188501, 41.1143849026, 1.3426134051}, {77.8345650346, 42.0901123803, 1.3574275722}, {78.0392721661, 43.0689269138, 1.3717492205}, {78.2301863626, 44.0505255821, 1.3855672900}, {78.4077707142, 45.0346233936, 1.3988721084}, {78.5725037209, 46.0209545884, 1.4116554172}, {78.7248770616, 47.0092715816, 1.4239103949}, {78.8653914540, 47.9993447762, 1.4356316752}, {78.9945566547, 48.9909625633, 1.4468153624}, {79.1128914592, 49.9839313225, 1.4574590420}, {79.2209197763, 50.9780744024, 1.4675617868}, {79.3191687167, 51.9732322727, 1.4771241604}, {79.4081668295, 52.9692611746, 1.4861482147}, {79.4884402258, 53.9660316010, 1.4946374848}, {79.5605125788, 54.9634282963, 1.5025969794}, {79.6249051235, 55.9613502561, 1.5100331663}, {79.6821332319, 56.9597089249, 1.5169539554}, {79.7327045714, 57.9584274858, 1.5233686764}, {79.7771178067, 58.9574397752, 1.5292880530}, {79.8158593563, 59.9566883540, 1.5347241740}, {79.8494033925, 60.9561245076, 1.5396904592}, {79.8782118413, 61.9557082459, 1.5442016230}, {79.9027316588, 62.9554065705, 1.5482736336}, {79.9233932408, 63.9551924170, 1.5519236692}, {79.9406095538, 64.9550441169, 1.5551700704}, {79.9547736506, 65.9549438384, 1.5580322898}, {79.9662586708, 66.9548775860, 1.5605308386}, {79.9754178406, 67.9548352009, 1.5626872297}, {79.9825825226, 68.9548092428, 1.5645239188}, {79.9880609132, 69.9547940794, 1.5660642423}, {79.9921376222, 70.9547858560, 1.5673323532}, {79.9950720160, 71.9547816717, 1.5683531544}, {79.9970982182, 72.9547795785, 1.5691522300}, {79.9984251091, 73.9547785820, 1.5697557753}, {79.9992352211, 74.9547782217, 1.5701905238}, {79.9996837438, 75.9547781080, 1.5704836745}, {79.9998986042, 76.9547781040, 1.5706628162}, {79.9999797198, 77.9547781213, 1.5707558520}, {79.9999989983, 78.9547781203, 1.5707909221}, {80.0000003379, 79.9547781099, 1.5707963264}, {80.0000000000, 80.0000000156, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class FV90: public FastTrajectory {
  public:
    FV90(bool mirror = false) : mirror(mirror) {}
    const float velocity = 670.2403081230615f;
    const float straight = 5.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 100;
    }
    virtual Position position(int index) const {
      static const float data[100 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999994, 0.0000030045, 0.0000120171}, {1.9999999965, 0.0000479303, 0.0000960628}, {2.9999999813, 0.0002429964, 0.0003237965}, {3.9999998306, 0.0007673159, 0.0007661408}, {4.9999991077, 0.0018701739, 0.0014929182}, {5.9999971338, 0.0038704384, 0.0025724930}, {6.9999917629, 0.0071547038, 0.0040714208}, {7.9999789168, 0.0121749355, 0.0060541073}, {8.9999520214, 0.0194451529, 0.0085824782}, {9.9999006706, 0.0295409513, 0.0117156614}, {10.9998085369, 0.0430955676, 0.0155096844}, {11.9996509545, 0.0607970764, 0.0200171867}, {12.9993944668, 0.0833820821, 0.0252871501}, {13.9989935301, 0.1116347318, 0.0313646473}, {14.9983880947, 0.1463823921, 0.0382906112}, {15.9974987463, 0.1884912654, 0.0461016249}, {16.9962260763, 0.2388584912, 0.0548297341}, {17.9944470863, 0.2984088378, 0.0645022828}, {18.9920118176, 0.3680919749, 0.0751417732}, {19.9887382693, 0.4488746289, 0.0867657504}, {20.9844106701, 0.5417338035, 0.0993867122}, {21.9787778052, 0.6476492455, 0.1130120452}, {22.9715483792, 0.7676021332, 0.1276439871}, {23.9623888603, 0.9025656200, 0.1432796148}, {24.9509212876, 1.0534986499, 0.1599108598}, {25.9367230808, 1.2213351315, 0.1775245493}, {26.9193247834, 1.4069825418, 0.1961024739}, {27.8982100036, 1.6113138798, 0.2156214808}, {28.8728166810, 1.8351605073, 0.2360535927}, {29.8425372498, 2.0793016505, 0.2573661509}, {30.8067209186, 2.3444610375, 0.2795219832}, {31.7646751561, 2.6313030627, 0.3024795940}, {32.7156730311, 2.9404235157, 0.3261933774}, {33.6589547320, 3.2723440741, 0.3506138506}, {34.5937317997, 3.6275071716, 0.3756879081}, {35.5191932509, 4.0062751308, 0.4013590937}, {36.4345154997, 4.4089237920, 0.4275678895}, {37.3388686535, 4.8356404108, 0.4542520221}, {38.2314193654, 5.2865217626, 0.4813467806}, {39.1113418286, 5.7615739231, 0.5087853493}, {39.9778255938, 6.2607120165, 0.5364991497}, {40.8300892965, 6.7837610210, 0.5644181926}, {41.6673813441, 7.3304587227, 0.5924714362}, {42.4889878241, 7.9004559880, 0.6205871791}, {43.2942411568, 8.4933313211, 0.6487107576}, {44.0825044806, 9.1086158266, 0.6768343361}, {44.8531543711, 9.7458228863, 0.7049579146}, {45.6055813340, 10.4044485434, 0.7330814931}, {46.3391902869, 11.0839719017, 0.7612050716}, {47.0534010308, 11.7838555374, 0.7893286501}, {47.7476487082, 12.5035459241, 0.8174522286}, {48.4213842500, 13.2424738706, 0.8455758071}, {49.0740748100, 14.0000549710, 0.8736993856}, {49.7052041858, 14.7756900667, 0.9018229641}, {50.3142732274, 15.5687657205, 0.9299465426}, {50.9007989518, 16.3786556480, 0.9580700832}, {51.4643247857, 17.2047155488, 0.9861755843}, {52.0044435090, 18.0462648479, 1.0141985166}, {52.5208313769, 18.9025802784, 1.0420673060}, {53.0132509885, 19.7729022335, 1.0697111684}, {53.4815517205, 20.6564369970, 1.0970604729}, {53.9256740529, 21.5523696358, 1.1240470989}, {54.3456497703, 22.4598713511, 1.1506047848}, {54.7416008483, 23.3781118487, 1.1766694683}, {55.1137394035, 24.3062604888, 1.2021796144}, {55.4623652622, 25.2434953990, 1.2270765311}, {55.7878647322, 26.1890113323, 1.2513046703}, {56.0907028649, 27.1420286800, 1.2748119124}, {56.3714213601, 28.1017967213, 1.2975498336}, {56.6306357760, 29.0675958625, 1.3194739542}, {56.8690281423, 30.0387457482, 1.3405439666}, {57.0873399512, 31.0146073730, 1.3607239419}, {57.2863639368, 31.9945862126, 1.3799825142}, {57.4669431090, 32.9781323800, 1.3982930413}, {57.6299609127, 33.9647426001, 1.4156337412}, {57.7763352851, 34.9539609475, 1.4319878040}, {57.9070069814, 35.9453769270, 1.4473434781}, {58.0229376269, 36.9386253572, 1.4616941300}, {58.1251038127, 37.9333847893, 1.4750382790}, {58.2144882983, 38.9293758467, 1.4873796040}, {58.2920715646, 39.9263569054, 1.4987269253}, {58.3588260248, 40.9241216264, 1.5090941592}, {58.4157144359, 41.9224980921, 1.5185002464}, {58.4636803345, 42.9213439130, 1.5269690552}, {58.5036432214, 43.9205432728, 1.5345292590}, {58.5364906122, 44.9200019154, 1.5412141893}, {58.5630772664, 45.9196466851, 1.5470616648}, {58.5842193728, 46.9194217987, 1.5521137977}, {58.6006896728, 47.9192856434, 1.5564167776}, {58.6132113639, 48.9192070008, 1.5600206346}, {58.6224559346, 49.9191636977, 1.5629789832}, {58.6290414609, 50.9191416432, 1.5653487472}, {58.6335270003, 51.9191314477, 1.5671898677}, {58.6364101296, 52.9191273784, 1.5685649961}, {58.6381236958, 53.9191258606, 1.5695391729}, {58.6390355592, 54.9191253711, 1.5701794939}, {58.6394455636, 55.9191252790, 1.5705547667}, {58.6395836892, 56.9191252764, 1.5707351575}, {58.6396091743, 57.9191252726, 1.5707918318}, {58.6396103068, 58.6396103182, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F135: public FastTrajectory {
  public:
    F135(bool mirror = false) : mirror(mirror) {}
    const float velocity = 665.8708556288690f;
    const float straight1 = 25.0f;
    const float straight2 = 17.279220589189272f;
  private:
    bool mirror;
    virtual int size() const {
      return 127;
    }
    virtual Position position(int index) const {
      static const float data[127 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999994, 0.0000030641, 0.0000122552}, {1.9999999964, 0.0000488781, 0.0000979650}, {2.9999999805, 0.0002478059, 0.0003302026}, {3.9999998239, 0.0007824941, 0.0007812800}, {4.9999990722, 0.0019071254, 0.0015223726}, {5.9999970197, 0.0039468106, 0.0026231492}, {6.9999914353, 0.0072956702, 0.0041514107}, {7.9999780804, 0.0124144021, 0.0061727374}, {8.9999501230, 0.0198268548, 0.0087501483}, {9.9998967498, 0.0301195348, 0.0119437745}, {10.9998009996, 0.0439375429, 0.0158105461}, {11.9996372583, 0.0619816786, 0.0204038967}, {12.9993707907, 0.0850019279, 0.0257734861}, {13.9989543266, 0.1137964435, 0.0319649422}, {14.9983255584, 0.1492070817, 0.0390196240}, {15.9974021295, 0.1921148760, 0.0469744067}, {16.9960809842, 0.2434318834, 0.0558614903}, {17.9942346686, 0.3040977692, 0.0657082323}, {18.9917078523, 0.3750769924, 0.0765370054}, {19.9883121408, 0.4573507067, 0.0883650819}, {20.9838243085, 0.5519097681, 0.1012045431}, {21.9779846028, 0.6597469638, 0.1150622174}, {22.9704920129, 0.7818556613, 0.1299396442}, {23.9610021487, 0.9192200587, 0.1458330662}, {24.9491250666, 1.0728088157, 0.1627334490}, {25.9344250996, 1.2435639249, 0.1806265278}, {26.9164186735, 1.4323992778, 0.1994928816}, {27.8945743609, 1.6401924093, 0.2193080340}, {28.8683143901, 1.8677771405, 0.2400425805}, {29.8370148372, 2.1159328847, 0.2616623410}, {30.8000081574, 2.3853812166, 0.2841285377}, {31.7565848594, 2.6767819880, 0.3073979961}, {32.7060013155, 2.9907238877, 0.3314233694}, {33.6474813875, 3.3277189676, 0.3561533846}, {34.5802208928, 3.6881975163, 0.3815331086}, {35.5033941187, 4.0725072170, 0.4075042337}, {36.4161641601, 4.4809068521, 0.4340053803}, {37.3176894957, 4.9135643480, 0.4609724158}, {38.2071269362, 5.3705551731, 0.4883387877}, {39.0836430747, 5.8518621475, 0.5160358693}, {39.9464223202, 6.3573754979, 0.5439933162}, {40.7946809622, 6.8868940106, 0.5721394315}, {41.6276678768, 7.4401283246, 0.6004015384}, {42.4446717497, 8.0167025993, 0.6287072584}, {43.2450287760, 8.6161706635, 0.6570153842}, {44.0280975149, 9.2380520709, 0.6853235099}, {44.7932505654, 9.8818485662, 0.7136316357}, {45.5398748928, 10.5470443432, 0.7419397614}, {46.2673721614, 11.2331063330, 0.7702478872}, {46.9751593568, 11.9394847165, 0.7985560130}, {47.6626693943, 12.6656135386, 0.8268641387}, {48.3293514462, 13.4109110294, 0.8551722645}, {48.9746712403, 14.1747799272, 0.8834803902}, {49.5981116204, 14.9566080587, 0.9117885160}, {50.1991730808, 15.7557690179, 0.9400966418}, {50.7773740560, 16.5716225222, 0.9684047675}, {51.3322511802, 17.4035147668, 0.9967128933}, {51.8633597790, 18.2507790649, 1.0250210191}, {52.3702743236, 19.1127365827, 1.0533291448}, {52.8525886783, 19.9886967253, 1.0816372706}, {53.3099163186, 20.8779575189, 1.1099453963}, {53.7418907470, 21.7798063022, 1.1382535221}, {54.1481658618, 22.6935205075, 1.1665616479}, {54.5284161590, 23.6183680732, 1.1948697736}, {54.8823369058, 24.5536078470, 1.2231778994}, {55.2096444760, 25.4984903207, 1.2514860251}, {55.5100766275, 26.4522584478, 1.2797941509}, {55.7833926571, 27.4141480757, 1.3081022767}, {56.0293735267, 28.3833883665, 1.3364104024}, {56.2478221139, 29.3592025647, 1.3647185282}, {56.4385633953, 30.3408088409, 1.3930266539}, {56.6014445512, 31.3274207389, 1.4213347797}, {56.7363350438, 32.3182476080, 1.4496429055}, {56.8431267791, 33.3124953940, 1.4779510312}, {56.9217341940, 34.3093674983, 1.5062591570}, {56.9720943097, 35.3080652338, 1.5345672827}, {56.9941667604, 36.3077882637, 1.5628754085}, {56.9879338652, 37.3077354051, 1.5911835343}, {56.9534006172, 38.3071054931, 1.6194916600}, {56.8905946850, 39.3050978393, 1.6477997858}, {56.7995663973, 40.3009126306, 1.6761079116}, {56.6803886986, 41.2937519207, 1.7044160373}, {56.5331570781, 42.2828202147, 1.7327241631}, {56.3579905453, 43.2673251306, 1.7610267770}, {56.1550550787, 44.2464842967, 1.7892729372}, {55.9246045219, 45.2195338921, 1.8173896041}, {55.6669817013, 46.1857446127, 1.8453042538}, {55.3826156309, 47.1444278100, 1.8729454117}, {55.0720196837, 48.0949379292, 1.9002430240}, {54.7357849277, 49.0366842298, 1.9271288209}, {54.3745736683, 49.9691359723, 1.9535366720}, {53.9891106125, 50.8918290723, 1.9794029294}, {53.5801817380, 51.8043667344, 2.0046667581}, {53.1486246201, 52.7064247012, 2.0292704523}, {52.6953218258, 53.5977540933, 2.0531597351}, {52.2211890687, 54.4781818941, 2.0762840404}, {51.7271732550, 55.3476112734, 2.0985967753}, {51.2142454033, 56.2060206612, 2.1200555625}, {50.6833923939, 57.0534637786, 2.1406224602}, {50.1356077701, 57.8900639422, 2.1602641591}, {49.5718875254, 58.7160121009, 2.1789521557}, {48.9932274734, 59.5315646346, 2.1966629000}, {48.4006144178, 60.3370375258, 2.2133779181}, {47.7950216970, 61.1327998431, 2.2290839081}, {47.1774039520, 61.9192667327, 2.2437728088}, {46.5486964254, 62.6968981715, 2.2574418425}, {45.9098094939, 63.4661898689, 2.2700935283}, {45.2616258767, 64.2276672523, 2.2817356698}, {44.6049970046, 64.9818750312, 2.2923813143}, {43.9407424849, 65.7293758593, 2.3020486852}, {43.2696477951, 66.4707427053, 2.3107610868}, {42.5924621748, 67.2065520211, 2.3185467840}, {41.9098966058, 67.9373741777, 2.3254388551}, {41.2226230605, 68.6637703639, 2.3314750199}, {40.5312737295, 69.3862890734, 2.3366974440}, {39.8364392652, 70.1054577660, 2.3411525197}, {39.1386675649, 70.8217776548, 2.3448906249}, {38.4384626322, 71.5357188532, 2.3479658616}, {37.7362843044, 72.2477194116, 2.3504357750}, {37.0325466596, 72.9581790775, 2.3523610543}, {36.3276170576, 73.6674564484, 2.3538052175}, {35.6218146932, 74.3758652089, 2.3548342818}, {34.9154104445, 75.0836737099, 2.3555164204}, {34.2086257152, 75.7911023819, 2.3559216084}, {33.5016313547, 76.4983215750, 2.3561212596}, {32.7945471090, 77.2054508863, 2.3561878553}, {32.2182540522, 77.7817459478, 2.3561944902},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class C180: public FastTrajectory {
  public:
    C180(bool mirror = false) : mirror(mirror) {}
    //    const float velocity = 818.9712224905114f;
    const float velocity = 720.0f;
    const float straight = 20.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 191;
    }
    virtual Position position(int index) const {
      static const float data[191 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999998, 0.0000016470, 0.0000065875}, {1.9999999990, 0.0000262522, 0.0000526730}, {2.9999999944, 0.0001332080, 0.0001776188}, {3.9999999485, 0.0004209695, 0.0004205163}, {4.9999996771, 0.0010266349, 0.0008200521}, {5.9999990692, 0.0021259453, 0.0014143745}, {6.9999975291, 0.0039324188, 0.0022409633}, {7.9999937068, 0.0066972203, 0.0033365004}, {8.9999854980, 0.0107073946, 0.0047367440}, {9.9999696427, 0.0162844551, 0.0064764061}, {10.9999412278, 0.0237843833, 0.0085890331}, {11.9998930995, 0.0335967507, 0.0111068903}, {12.9998142768, 0.0461424254, 0.0140608517}, {13.9996899115, 0.0618728975, 0.0174802934}, {14.9995009771, 0.0812666272, 0.0213929931}, {15.9992221938, 0.1048288724, 0.0258250345}, {16.9988219864, 0.1330912862, 0.0308007179}, {17.9982593336, 0.1666078907, 0.0363424766}, {18.9974833324, 0.2059550595, 0.0424707998}, {19.9964331438, 0.2517261823, 0.0492041625}, {20.9950353235, 0.3045306372, 0.0565589617}, {21.9932031697, 0.3649937596, 0.0645494605}, {22.9908338543, 0.4337525985, 0.0731877388}, {23.9878070408, 0.5114545709, 0.0824836520}, {24.9839848840, 0.5987525521, 0.0924447968}, {25.9792106620, 0.6963017278, 0.1030764858}, {26.9733062007, 0.8047595939, 0.1143817286}, {27.9660714004, 0.9247834040, 0.1263612216}, {28.9572823406, 1.0570250151, 0.1390133460}, {29.9466912574, 1.2021291436, 0.1523341729}, {30.9340263638, 1.3607271068, 0.1663174770}, {31.9189900517, 1.5334366719, 0.1809547579}, {32.9012589608, 1.7208610737, 0.1962352694}, {33.8804844455, 1.9235820779, 0.2121460563}, {34.8562925519, 2.1421596805, 0.2286719990}, {35.8282841200, 2.3771250921, 0.2457958653}, {36.7960361904, 2.6289797526, 0.2634983697}, {37.7591013292, 2.8981952056, 0.2817582393}, {38.7170118617, 3.1852077370, 0.3005522875}, {39.6692809336, 3.4904166093, 0.3198554930}, {40.6154025111, 3.8141800461, 0.3396410861}, {41.5548545554, 4.1568131680, 0.3598806404}, {42.4871008755, 4.5185879931, 0.3805441705}, {43.4115954518, 4.8997316903, 0.4016002351}, {44.3277870743, 5.3004229119, 0.4230160449}, {45.2351193441, 5.7207920822, 0.4447575750}, {46.1330327603, 6.1609199684, 0.4667896821}, {47.0209716173, 6.6208376659, 0.4890762250}, {47.8983851150, 7.1005266491, 0.5115801885}, {48.7647356625, 7.5999182129, 0.5342638111}, {49.6194993577, 8.1188942579, 0.5570887139}, {50.4621663898, 8.6572892540, 0.5800160333}, {51.2922490334, 9.2148903346, 0.6030065537}, {52.1092852186, 9.7914384484, 0.6260212591}, {52.9128363116, 10.3866372548, 0.6490373987}, {53.7024765543, 11.0001713839, 0.6720535382}, {54.4777876531, 11.6317158299, 0.6950696777}, {55.2383590196, 12.2809361399, 0.7180858172}, {55.9837877703, 12.9474884147, 0.7411019567}, {56.7136792304, 13.6310197983, 0.7641180963}, {57.4276465418, 14.3311679667, 0.7871342358}, {58.1253111153, 15.0475616178, 0.8101503753}, {58.8063034177, 15.7798212947, 0.8331665148}, {59.4702629712, 16.5275593852, 0.8561826544}, {60.1168383537, 17.2903801224, 0.8791987939}, {60.7456871986, 18.0678795843, 0.9022149334}, {61.3564761951, 18.8596456940, 0.9252310729}, {61.9488814969, 19.6652587505, 0.9482472124}, {62.5225895624, 20.4842923275, 0.9712633520}, {63.0772961294, 21.3163119780, 0.9942794915}, {63.6127073043, 22.1608768689, 1.0172956310}, {64.1285396327, 23.0175398804, 1.0403117705}, {64.6245200995, 23.8858476052, 1.0633279101}, {65.1003861290, 24.7653403489, 1.0863440496}, {65.5558855846, 25.6555521300, 1.1093601891}, {65.9907768636, 26.5560108723, 1.1323763286}, {66.4048297930, 27.4662400411, 1.1553924681}, {66.7978248561, 28.3857569208, 1.1784086077}, {67.1695537753, 29.3140741522, 1.2014247472}, {67.5198197165, 30.2507001859, 1.2244408867}, {67.8484372884, 31.1951392813, 1.2474570262}, {68.1552325430, 32.1468915076, 1.2704731658}, {68.4400429756, 33.1054527430, 1.2934893053}, {68.7027175277, 34.0703146883, 1.3165054448}, {68.9431170593, 35.0409664628, 1.3395215843}, {69.1611142354, 36.0168936790, 1.3625377238}, {69.3565934951, 36.9975788799, 1.3855538634}, {69.5294513082, 37.9825026664, 1.4085700029}, {69.6795961751, 38.9711436982, 1.4315861424}, {69.8069486269, 39.9629786930, 1.4546022819}, {69.9114412257, 40.9574824269, 1.4776184215}, {69.9930185637, 41.9541277345, 1.5006345610}, {70.0516373406, 42.9523863889, 1.5236507005}, {70.0872665603, 43.9517299044, 1.5466668400}, {70.0998873644, 44.9516282352, 1.5696829795}, {70.0894930725, 45.9515516600, 1.5926991191}, {70.0560891845, 46.9509708357, 1.6157152586}, {69.9996933808, 47.9493567967, 1.6387313981}, {69.9203355223, 48.9461809559, 1.6617475376}, {69.8180576505, 49.9409151037, 1.6847636772}, {69.6929139489, 50.9330317435, 1.7077798167}, {69.5449706393, 51.9220058363, 1.7307959562}, {69.3743062397, 52.9073128775, 1.7538120957}, {69.1810112054, 53.8884307088, 1.7768282352}, {68.9651878786, 54.8648398556, 1.7998443748}, {68.7269504889, 55.8360235271, 1.8228605143}, {68.4664251529, 56.8014676166, 1.8458766538}, {68.1837498744, 57.7606607008, 1.8688927933}, {67.8790745277, 58.7130940914, 1.8919089329}, {67.5525603540, 59.6582635874, 1.9149250724}, {67.2043804909, 60.5956681929, 1.9379412119}, {66.8347195442, 61.5248109561, 1.9609573514}, {66.4437732808, 62.4451998168, 1.9839734909}, {66.0317486289, 63.3563476073, 2.0069896305}, {65.5988636782, 64.2577720515, 2.0300057700}, {65.1453476796, 65.1489957660, 2.0530219095}, {64.6714410452, 66.0295462589, 2.0760380490}, {64.1773948229, 66.8989569316, 2.0990541886}, {63.6634706765, 67.7567674115, 2.1220703281}, {63.1299411964, 68.6025227734, 2.1450864676}, {62.5770890088, 69.4357750032, 2.1681026071}, {62.0052067695, 70.2560830089, 2.1911187466}, {61.4145971635, 71.0630126210, 2.2141348862}, {60.8055729054, 71.8561365921, 2.2371510257}, {60.1784567390, 72.6350345974, 2.2601671652}, {59.5335811288, 73.3992936131, 2.2831833047}, {58.8712873739, 74.1485091713, 2.3061994443}, {58.1919267905, 74.8822839241, 2.3292155838}, {57.4958593702, 75.6002290602, 2.3522317233}, {56.7834536369, 76.3019644696, 2.3752478628}, {56.0550866473, 76.9871187426, 2.3982640023}, {55.3111439904, 77.6553291706, 2.4212801419}, {54.5520197880, 78.3062417455, 2.4442962814}, {53.7781166460, 78.9395112053, 2.4673124209}, {52.9898445080, 79.5548021038, 2.4903285604}, {52.1876207795, 80.1517886577, 2.5133447000}, {51.3718704182, 80.7301546383, 2.5363599920}, {50.5430293841, 81.2896009091, 2.5593545370}, {49.7015594509, 81.8298641026, 2.5822896887}, {48.8479457095, 82.3507267102, 2.6051262046}, {47.9826926852, 82.8520187484, 2.6278251809}, {47.1063243378, 83.3336177585, 2.6503481863}, {46.2193792986, 83.7954497699, 2.6726573937}, {45.3224073462, 84.2374915793, 2.6947157102}, {44.4159640609, 84.6597696287, 2.7164869045}, {43.5006054540, 85.0623598342, 2.7379357315}, {42.5768879684, 85.4453875855, 2.7590280529}, {41.6453669258, 85.8090271789, 2.7797309549}, {40.7065886310, 86.1535003997, 2.8000128608}, {39.7610904500, 86.4790761240, 2.8198436400}, {38.8093945686, 86.7860656106, 2.8391947109}, {37.8520073755, 87.0748221631, 2.8580391394}, {36.8894193754, 87.3457409953, 2.8763517311}, {35.9221010306, 87.5992544168, 2.8941091183}, {34.9505009955, 87.8358316180, 2.9112898398}, {33.9750446812, 88.0559723696, 2.9278744147}, {32.9961330604, 88.2602044105, 2.9438454096}, {32.0141426668, 88.4490834486, 2.9591874981}, {31.0294252917, 88.6231903697, 2.9738875134}, {30.0423062473, 88.7831256330, 2.9879344939}, {29.0530853260, 88.9295078251, 3.0013197206}, {28.0620375005, 89.0629670362, 3.0140367471}, {27.0694129251, 89.1841446978, 3.0260814215}, {26.0754371369, 89.2936929476, 3.0374519011}, {25.0803127436, 89.3922676080, 3.0481486584}, {24.0842192260, 89.4805281034, 3.0581744795}, {23.0873162224, 89.5591307441, 3.0675344548}, {22.0897441053, 89.6287272658, 3.0762359612}, {21.0916239818, 89.6899648287, 3.0842886369}, {20.0930598177, 89.7434820785, 3.0917043481}, {19.0941399543, 89.7899058664, 3.0984971489}, {18.0949389903, 89.8298486824, 3.1046832321}, {17.0955200271, 89.8639049547, 3.1102808743}, {16.0959346694, 89.8926510491, 3.1153103729}, {15.0962236579, 89.9166442716, 3.1197939764}, {14.0964200758, 89.9364179144, 3.1237558080}, {13.0965493222, 89.9524813287, 3.1272217826}, {12.0966316869, 89.9653157582, 3.1302195180}, {11.0966826033, 89.9753739344, 3.1327782403}, {10.0967126858, 89.9830800065, 3.1349286828}, {9.0967294792, 89.9888264799, 3.1367029813}, {8.0967381311, 89.9929732922, 3.1381345630}, {7.0967421390, 89.9958458507, 3.1392580323}, {6.0967438928, 89.9977339104, 3.1401090515}, {5.0967446748, 89.9988915745, 3.1407242188}, {4.0967449079, 89.9995366103, 3.1411409420}, {3.0967449619, 89.9998483630, 3.1413973108}, {2.0967449572, 89.9999679410, 3.1415319652}, {1.0967449535, 89.9999974067, 3.1415839635}, {0.0967449589, 89.9999997477, 3.1415926476}, { 0, 90.0000000000, 3.1415926536},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class FastRun: TaskBase {
  public:
    FastRun() : TaskBase("FastRun", FAST_RUN_TASK_PRIORITY, FAST_RUN_STACK_SIZE) {
      xLastWakeTime = xTaskGetTickCount();
      set_speed();
    }
    virtual ~FastRun() {}
    enum FAST_ACTION : char {
      FAST_GO_STRAIGHT = 's',
      FAST_GO_HALF = 'x',
      FAST_DIAGONAL_LEFT = 'w',
      FAST_DIAGONAL_RIGHT = 'W',
      FAST_TURN_LEFT_45 = 'z',
      FAST_TURN_RIGHT_45 = 'c',
      FAST_TURN_LEFT_45R = 'Z',
      FAST_TURN_RIGHT_45R = 'C',
      FAST_TURN_LEFT_90 = 'l',
      FAST_TURN_RIGHT_90 = 'r',
      FAST_TURN_LEFT_V90 = 'q',
      FAST_TURN_RIGHT_V90 = 'e',
      FAST_TURN_LEFT_135 = 'a',
      FAST_TURN_RIGHT_135 = 'd',
      FAST_TURN_LEFT_135R = 'A',
      FAST_TURN_RIGHT_135R = 'D',
      FAST_TURN_LEFT_180 = 'Q',
      FAST_TURN_RIGHT_180 = 'E',
    };
    float fast_speed;
    float fast_curve_gain;
    void set_speed(const float speed = 600, const float gain = 0.5) {
      fast_speed = speed;
      fast_curve_gain = gain;
    }
    void enable() {
      printf("FastRun Enabled\n");
      delete_task();
      create_task();
    }
    void disable() {
      delete_task();
      sc.disable();
      path = "";
      printf("FastRun Disabled\n");
    }
    void set_action(FAST_ACTION action, const int num = 1) {
      for (int i = 0; i < num; i++)
        path += (char)action;
    }
    void set_path(String path) {
      this->path = path;
    }
    String get_last_path() {
      return last_path;
    }
    int actions() const {
      return path.length();
    }
    void waitForEnd() const {
      while (actions()) {
        delay(1);
      }
    }
    void printPosition(const char* name) const {
      printf("%s\tRel:(%06.1f, %06.1f, %06.3f)\t", name, getRelativePosition().x, getRelativePosition().y, getRelativePosition().theta);
      printf("Abs:(%06.1f, %06.1f, %06.3f)\n", sc.getPosition().x, sc.getPosition().y, sc.getPosition().theta);
    }
    Position getRelativePosition() const {
      return (sc.getPosition() - origin).rotate(-origin.theta);
    }
    void updateOrigin(Position passed) {
      origin += passed.rotate(origin.theta);
    }
    //    void setPosition(Position pos = Position(SEGMENT_WIDTH / 2, WALL_THICKNESS / 2 + MACHINE_TAIL_LENGTH, M_PI / 2)) {
    void setPosition(Position pos = Position(0, 0, 0)) {
      origin = pos;
      sc.getPosition() = pos;
    }
    void fixPosition(Position pos) {
      sc.getPosition() -= pos;
    }
  private:
    portTickType xLastWakeTime;
    Position origin;
    String path, last_path;

    void wall_avoid() {
#if FAST_WALL_AVOID
      const float gain = FAST_WALL_AVOID_GAIN;
      const float threashold_ratio = 0.3f;
      if (wd.wall_ratio().side[0] < threashold_ratio) {
        fixPosition(Position(0, wd.wall_ratio().side[0] * gain * sc.actual.trans, 0).rotate(origin.theta));
      }
      if (wd.wall_ratio().side[1] < threashold_ratio) {
        fixPosition(Position(0, -wd.wall_ratio().side[1] * gain * sc.actual.trans, 0).rotate(origin.theta));
      }
#endif
    }
    void straight_x(const float distance, const float v_max, const float v_end, bool avoid) {
      const float accel = 1500;
      const float decel = 1000;
      int ms = 0;
      const float v_start = sc.actual.trans;
      const float T = 1.5f * (v_max - v_start) / accel;
      while (1) {
        Position cur = getRelativePosition();
        if (v_end >= 1.0f && cur.x > distance - FAST_LOOK_AHEAD) break;
        if (v_end < 1.0f && cur.x > distance - 1.0f) break;
        float extra = distance - cur.x;
        float velocity_a = v_start + (v_max - v_start) * 6.0f * (-1.0f / 3 * pow(ms / 1000.0f / T, 3) + 1.0f / 2 * pow(ms / 1000.0f / T, 2));
        float velocity_d = sqrt(2 * decel * fabs(extra) + v_end * v_end);
        float velocity = v_max;
        if (velocity > velocity_d) velocity = velocity_d;
        if (ms / 1000.0f < T && velocity > velocity_a) velocity = velocity_a;
        float theta = atan2f(-cur.y, FAST_LOOK_AHEAD * (1 + velocity / 600)) - cur.theta;
        sc.set_target(velocity, FAST_PROP_GAIN * theta);
        if (avoid) wall_avoid();
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        ms++;
      }
      sc.set_target(v_end, 0);
      updateOrigin(Position(distance, 0, 0));
      printPosition("Straight End");
    }
    template<class C>
    void trace(C tr, const float velocity) {
      while (1) {
        if (tr.getRemain() < FAST_LOOK_AHEAD) break;
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        Position dir = tr.getNextDir(getRelativePosition());
        sc.set_target(velocity, FAST_PROP_GAIN * dir.theta);
      }
      sc.set_target(velocity, 0);
      updateOrigin(tr.getEndPosition());
      printPosition("Trace End");
    }
    virtual void task() {
      if (path[0] != 'x' && path[0] != 'c' && path[0] != 'z') {
        path = "x" + path + "x";
      }

      printf("Input Path: %s\n", path.c_str());
      path.replace("s", "xx");
      path.replace("l", "LL");
      path.replace("r", "RR");

      path.replace("RLLLLR", "RLqLR");
      path.replace("LRRRRL", "LReRL");

      path.replace("xLLR", "zLR");
      path.replace("xRRL", "cRL");
      path.replace("LRRx", "LRC");
      path.replace("RLLx", "RLZ");

      path.replace("xLLLLR", "aLR");
      path.replace("xRRRRL", "dRL");
      path.replace("RLLLLx", "RLA");
      path.replace("LRRRRx", "LRD");

      path.replace("xLLLLx", "Q");
      path.replace("xRRRRx", "E");

      path.replace("RLLR", "RLwLR");
      path.replace("LRRL", "LRWRL");

      path.replace("RL", "");
      path.replace("LR", "");
      path.replace("xRRx", "r");
      path.replace("xLLx", "l");
      printf("Running Path: %s\n", path.c_str());

      const float v_max = fast_speed;
      const float curve_gain = fast_curve_gain;
      sc.enable();
      setPosition();
      printPosition("S");
      int path_index = 0;
      float straight = SEGMENT_WIDTH / 2 - MACHINE_TAIL_LENGTH - WALL_THICKNESS / 2;
      fan.drive(0.3);
      delay(500);
      for (int path_index = 0; path_index < path.length(); path_index++) {
        printPosition(String(path[path_index]).c_str());
        switch (path[path_index]) {
          case FAST_TURN_LEFT_45: {
              F45 tr(false);
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, true);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_45: {
              F45 tr(true);
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, true);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_45R: {
              F45 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
            }
            break;
          case FAST_TURN_RIGHT_45R: {
              F45 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
            }
            break;
          case FAST_TURN_LEFT_V90: {
              FV90 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_V90: {
              FV90 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_90: {
              F90 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, true);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_90: {
              F90 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, true);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_135: {
              F135 tr(false);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, true);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_RIGHT_135: {
              F135 tr(true);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, true);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_LEFT_135R: {
              F135 tr(false);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_RIGHT_135R: {
              F135 tr(true);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_LEFT_180: {
              C180 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, true);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_180: {
              C180 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, true);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_GO_STRAIGHT:
            straight += SEGMENT_WIDTH;
            break;
          case FAST_GO_HALF:
            straight += SEGMENT_WIDTH / 2;
            break;
          case FAST_DIAGONAL_LEFT:
          case FAST_DIAGONAL_RIGHT:
            straight += SEGMENT_DIAGONAL_WIDTH / 2;
            break;
        }
      }
      //      printPosition("E1");
      if (straight > 1.0f) {
        straight_x(straight, v_max, 0, true);
        straight = 0;
      }
      //      printPosition("E2");
      sc.set_target(0, 0);
      fan.drive(0);
      delay(100);
      sc.disable();
      //      printPosition("E3");
      bz.play(Buzzer::COMPLETE);
      last_path = path;
      path = "";
      while (1) {
        delay(1000);
      }
    }
};

extern FastRun fr;

