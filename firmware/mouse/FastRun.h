#pragma once

#include <Arduino.h>
#include <vector>
#include <queue>
#include "TaskBase.h"
#include "config.h"
#include "logger.h"
#include "encoder.h"
#include "motor.h"
#include "axis.h"
#include "reflector.h"
#include "WallDetector.h"
#include "SpeedController.h"

#define FAST_RUN_TASK_PRIORITY  3
#define FAST_RUN_STACK_SIZE     8192

#define FAST_RUN_PERIOD         1000

#define FAST_LOOK_AHEAD         12
#define FAST_PROP_GAIN          20

//#define printf  lg.printf

class FastTrajectory {
  public:
    FastTrajectory() {
      reset();
    }
    virtual ~FastTrajectory() {
    }
    void reset() {
      last_index = -FAST_LOOK_AHEAD;
    }
    Position getNextDir(const Position &cur) {
      int index_cur = getNextIndex(cur);
      int look_ahead = FAST_LOOK_AHEAD;
      Position dir = (getPosition(index_cur + look_ahead) - cur).rotate(-cur.theta);
      dir.theta = atan2f(dir.y, dir.x);
      return dir;
    }
    float getRemain() const {
      return (getSize() - last_index) * interval;
    }
    Position getEndPosition() {
      return getPosition(getSize());
    }
  protected:
    int last_index;
    const float interval = 1.0f;
    virtual int size() const {
      return 180;
    }
    virtual Position position(int index) const {
      return Position(index * interval, 0, 0);
    }
    int getSize() const {
      return size();
    }
    Position getPosition(const int index) {
      return position(index);
    }
    int getNextIndex(const Position& pos) {
      for (int i = last_index;; i++) {
        Position target = getPosition(i);
        Position dir = (target - pos).rotate(-target.theta);
        if (dir.x > 0) {
          last_index = i;
          return last_index;
        }
      }
      return last_index;
    }
};

class F45: public FastTrajectory {
  public:
    F45(bool mirror = false) : mirror(mirror) {}
    const float velocity = 512.4646434154613;
    const float straight1 = 10.0f;
    const float straight2 = 28.639610403817208f;
  private:
    bool mirror;
    virtual int size() const {
      return 69;
    }
    virtual Position position(int index) const {
      static const float data[69 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999990, 0.0000041620, 0.0000166458}, {1.9999999934, 0.0000659679, 0.0001328140}, {2.9999999641, 0.0003358814, 0.0004477307}, {3.9999996661, 0.0010613256, 0.0010585529}, {4.9999970897, 0.0025840452, 0.0020594643}, {5.9999925164, 0.0053401068, 0.0035416759}, {6.9999834983, 0.0098516845, 0.0055922203}, {7.9999616041, 0.0167345798, 0.0082936938}, {8.9999124186, 0.0266838467, 0.0117231305}, {9.9998155428, 0.0404582780, 0.0159505084}, {10.9996435321, 0.0588804056, 0.0210387490}, {11.9993519043, 0.0828365003, 0.0270437175}, {12.9988861978, 0.1132746066, 0.0340141466}, {13.9981679205, 0.1511741230, 0.0419899208}, {14.9970911206, 0.1975647070, 0.0510022095}, {15.9955223870, 0.2534924202, 0.0610732966}, {16.9933008483, 0.3200075699, 0.0722162716}, {17.9902353161, 0.3981647088, 0.0844350292}, {18.9860910531, 0.4890226353, 0.0977242692}, {19.9805948602, 0.5936350423, 0.1120696252}, {20.9734323510, 0.7130147474, 0.1274475086}, {21.9642475387, 0.8481542690, 0.1438248534}, {22.9526428370, 0.9999864531, 0.1611606013}, {23.9381790597, 1.1693804134, 0.1794058028}, {24.9203826554, 1.3571415313, 0.1985036173}, {25.8987363401, 1.5640114554, 0.2183893129}, {26.8726919111, 1.7906523360, 0.2389915154}, {27.8416869348, 2.0376250626, 0.2602325501}, {28.8051447545, 2.3054000899, 0.2820287041}, {29.7624744893, 2.5943422183, 0.3042926148}, {30.7130726479, 2.9047104478, 0.3269332860}, {31.6563543266, 3.2366579787, 0.3498560879}, {32.5917382887, 3.5902323989, 0.3729628398}, {33.5186759547, 3.9653756945, 0.3961547651}, {34.4366636793, 4.3619108201, 0.4193313513}, {35.3452427513, 4.7795629996, 0.4423926133}, {36.2439993934, 5.2179660950, 0.4652405500}, {37.1325697279, 5.6766626073, 0.4877791446}, {38.0106698833, 6.1551036757, 0.5099143642}, {38.8780845062, 6.6526540676, 0.5315546334}, {39.7346763399, 7.1686184562, 0.5526138975}, {40.5803881733, 7.7022240198, 0.5730100773}, {41.4152428411, 8.2526567705, 0.5926675076}, {42.2393432233, 8.8190670006, 0.6115173827}, {43.0528680024, 9.4005692821, 0.6294977555}, {43.8560804545, 9.9962424673, 0.6465535384}, {44.6493192885, 10.6051434612, 0.6626371973}, {45.4329798536, 11.2263307273, 0.6777104031}, {46.2075139910, 11.8588524026, 0.6917431549}, {46.9734300341, 12.5017720825, 0.7047145866}, {47.7312921477, 13.1541695754, 0.7166129990}, {48.4816912028, 13.8151409024, 0.7274358593}, {49.2252565462, 14.4837984130, 0.7371897968}, {49.9626313187, 15.1592875586, 0.7458904021}, {50.6944557804, 15.8407879532, 0.7535630913}, {51.4213673110, 16.5275166470, 0.7602419211}, {52.1440004095, 17.2187372916, 0.7659689908}, {52.8629822493, 17.9137601398, 0.7707944422}, {53.5788990346, 18.6119420458, 0.7747764596}, {54.2923111986, 19.3126876065, 0.7779810321}, {55.0037308495, 20.0154612739, 0.7804800545}, {55.7136168440, 20.7197821378, 0.7823528121}, {56.4223747874, 21.4252318574, 0.7836831246}, {57.1303570333, 22.1314570766, 0.7845587194}, {57.8378576598, 22.8381694238, 0.7850712317}, {58.5450963885, 23.5451455119, 0.7853162047}, {59.2522271368, 24.2522284757, 0.7853923976}, {59.7487372729, 24.7487372729, 0.7853981634},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F90: public FastTrajectory {
  public:
    F90(bool mirror = false) : mirror(mirror) {}
    const float velocity = 604.3356976159932f;
    const float straight = 20.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 119;
    }
    virtual Position position(int index) const {
      static const float data[119 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999996, 0.0000024015, 0.0000096050}, {1.9999999978, 0.0000383123, 0.0000767763}, {2.9999999880, 0.0001942108, 0.0002587611}, {3.9999998919, 0.0006131739, 0.0006121703}, {4.9999994376, 0.0014942954, 0.0011926649}, {5.9999981767, 0.0030920694, 0.0020546472}, {6.9999947380, 0.0057149064, 0.0032509596}, {7.9999865525, 0.0097228026, 0.0048325916}, {8.9999694300, 0.0155250032, 0.0068483973}, {9.9999367854, 0.0235793324, 0.0093448246}, {10.9998781551, 0.0343888269, 0.0123656576}, {11.9997779951, 0.0484988157, 0.0159517745}, {12.9996152010, 0.0664924324, 0.0201409204}, {13.9993611080, 0.0889899335, 0.0249674984}, {14.9989776614, 0.1166441432, 0.0304623791}, {15.9984150054, 0.1501369497, 0.0366527292}, {16.9976110921, 0.1901728822, 0.0435618613}, {17.9964890190, 0.2374780185, 0.0512091043}, {18.9949551320, 0.2927952278, 0.0596096965}, {19.9928961845, 0.3568797223, 0.0687747013}, {20.9901789202, 0.4304915752, 0.0787109454}, {21.9866480141, 0.5143935003, 0.0894209817}, {22.9821242560, 0.6093470613, 0.1009030743}, {23.9764029442, 0.7161065561, 0.1131512088}, {24.9692534353, 0.8354121768, 0.1261551254}, {25.9604186444, 0.9679859776, 0.1399003756}, {26.9496138976, 1.1145296315, 0.1543684025}, {27.9365279167, 1.2757171129, 0.1695366435}, {28.9208230700, 1.4521895317, 0.1853786556}, {29.9021361179, 1.6445497930, 0.2018642614}, {30.8800793419, 1.8533614932, 0.2189597170}, {31.8542436923, 2.0791424379, 0.2366278986}, {32.8242012776, 2.3223609172, 0.2548285084}, {33.7895064193, 2.5834310137, 0.2735182976}, {34.7496999299, 2.8627119852, 0.2926513068}, {35.7043132696, 3.1605044271, 0.3121791199}, {36.6528740877, 3.4770478003, 0.3320511329}, {37.5949072104, 3.8125185801, 0.3522148344}, {38.5299408155, 4.1670298426, 0.3726160962}, {39.4575105747, 4.5406306115, 0.3931994737}, {40.3771680774, 4.9333054156, 0.4139085129}, {41.2884818388, 5.3449754982, 0.4346860636}, {42.1910405801, 5.7755003960, 0.4554796895}, {43.0844526535, 6.2246984018, 0.4762733820}, {43.9683317629, 6.6923752895, 0.4970670744}, {44.8422957746, 7.1783288651, 0.5178607668}, {45.7059668158, 7.6823490190, 0.5386544592}, {46.5589714528, 8.2042178229, 0.5594481516}, {47.4009408893, 8.7437096469, 0.5802418441}, {48.2315110987, 9.3005912410, 0.6010355365}, {49.0503229596, 9.8746218215, 0.6218292289}, {49.8570224461, 10.4655531969, 0.6426229213}, {50.6512607905, 11.0731298846, 0.6634166137}, {51.4326945836, 11.6970891839, 0.6842103062}, {52.2009859513, 12.3371613084, 0.7050039986}, {52.9558027344, 12.9930695326, 0.7257976910}, {53.6968185722, 13.6645302616, 0.7465913834}, {54.4237130652, 14.3512531693, 0.7673850758}, {55.1361719442, 15.0529413548, 0.7881787683}, {55.8338871729, 15.7692914387, 0.8089724607}, {56.5165570735, 16.4999936857, 0.8297661531}, {57.1838864865, 17.2447321691, 0.8505598455}, {57.8355868973, 18.0031849066, 0.8713535379}, {58.4713765254, 18.7750239615, 0.8921472304}, {59.0909804719, 19.5599156097, 0.9129409228}, {59.6941308605, 20.3575205154, 0.9337346152}, {60.2805669048, 21.1674938161, 0.9545283076}, {60.8500350427, 21.9894852960, 0.9753220000}, {61.4022890701, 22.8231395751, 0.9961156925}, {61.9370902133, 23.6680962133, 1.0169093849}, {62.4542072350, 24.5239898684, 1.0377030773}, {62.9534165574, 25.3904504903, 1.0584967697}, {63.4345023483, 26.2671034665, 1.0792904621}, {63.8972565961, 27.1535697511, 1.1000841546}, {64.3414792267, 28.0494660755, 1.1208778470}, {64.7669780837, 28.9544051325, 1.1416706162}, {65.1735793096, 29.8679917479, 1.1624354693}, {65.5611579223, 30.7898087150, 1.1831164760}, {65.9296520329, 31.7194192725, 1.2036566412}, {66.2790635862, 32.6563705974, 1.2239997505}, {66.6094583642, 33.6001959989, 1.2440906816}, {66.9209668952, 34.5504221070, 1.2638757096}, {67.2137828535, 35.5065739471, 1.2833028051}, {67.4881615519, 36.4681801517, 1.3023219223}, {67.7444193481, 37.4347740106, 1.3208852764}, {67.9829309079, 38.4058997287, 1.3389476085}, {68.2041262045, 39.3811158669, 1.3564664363}, {68.4084856674, 40.3599995670, 1.3734022898}, {68.5965394494, 41.3421471062, 1.3897189296}, {68.7688623484, 42.3271772530, 1.4053835480}, {68.9260698361, 43.3147333717, 1.4203669512}, {69.0688107488, 44.3044848720, 1.4346437201}, {69.1977660581, 45.2961275474, 1.4481923524}, {69.3136435636, 46.2893840470, 1.4609953806}, {69.4171728433, 47.2840045285, 1.4730394697}, {69.5090974044, 48.2797653007, 1.4843154907}, {69.5901723214, 49.2764685784, 1.4948185711}, {69.6611604015, 50.2739415683, 1.5045481223}, {69.7228258257, 51.2720352391, 1.5135078423}, {69.7759277584, 52.2706217798, 1.5217056957}, {69.8212165010, 53.2695932486, 1.5291538694}, {69.8594314435, 54.2688607119, 1.5358687051}, {69.8912943035, 55.2683515045, 1.5418706083}, {69.9175046105, 56.2680070542, 1.5471839361}, {69.9387349928, 57.2677806775, 1.5518368613}, {69.9556301920, 58.2676371211, 1.5558612169}, {69.9688014028, 59.2675498481, 1.5592923193}, {69.9788229150, 60.2674994787, 1.5621687728}, {69.9862277230, 61.2674718303, 1.5645322554}, {69.9915069157, 62.2674576568, 1.5664272884}, {69.9951058738, 63.2674510465, 1.5679009888}, {69.9974216746, 64.2674483883, 1.5690028089}, {69.9988000478, 65.2674474381, 1.5697842618}, {69.9995347997, 66.2674471211, 1.5702986363}, {69.9998660644, 67.2674470601, 1.5706007012}, {69.9999781981, 68.2674470569, 1.5707464019}, {69.9999991238, 69.2674470552, 1.5707925505}, {70.0000000000, 70.0000000097, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F135: public FastTrajectory {
  public:
    F135(bool mirror = false) : mirror(mirror) {}
    const float velocity = 412.3064702921300f;
    const float straight1 = 40.0f;
    const float straight2 = 32.279220608529918f;
  private:
    bool mirror;
    virtual int size() const {
      return 108;
    }
    virtual Position position(int index) const {
      static const float data[108 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999979, 0.0000075607, 0.0000302367}, {1.9999999876, 0.0001207684, 0.0002414618}, {2.9999998686, 0.0006105385, 0.0008125099}, {3.9999989165, 0.0019240145, 0.0019179337}, {4.9999950063, 0.0046805358, 0.0037259265}, {5.9999823248, 0.0096635713, 0.0063963213}, {6.9999484580, 0.0178104804, 0.0100786879}, {7.9998708072, 0.0302036913, 0.0149105539}, {8.9997098903, 0.0480551399, 0.0210157674}, {9.9994038581, 0.0726923531, 0.0285030233}, {10.9988609617, 0.1055442038, 0.0374645703}, {11.9979495440, 0.1481192346, 0.0479751126}, {12.9964912198, 0.2019898451, 0.0600909209}, {13.9942510981, 0.2687722296, 0.0738491632}, {14.9909283715, 0.3501010612, 0.0892674621}, {15.9861505260, 0.4476123990, 0.1063436853}, {16.9794658853, 0.5629191261, 0.1250559709}, {17.9703395954, 0.6975848997, 0.1453629875}, {18.9581518819, 0.8531066268, 0.1672044261}, {19.9421988699, 1.0308883522, 0.1905017179}, {20.9216965512, 1.2322186957, 0.2151589691}, {21.8957866120, 1.4582544829, 0.2410641022}, {22.8635491576, 1.7099982374, 0.2680901895}, {23.8240138800, 1.9882834700, 0.2960969641}, {24.7761759005, 2.2937622882, 0.3249324883}, {25.7190181792, 2.6268932758, 0.3544349625}, {26.6515271370, 2.9879362693, 0.3844346501}, {27.5727178895, 3.3769490592, 0.4147558976}, {28.4816566223, 3.7937859244, 0.4452195280}, {29.3774708905, 4.2381278374, 0.4756977560}, {30.2593282861, 4.7095618865, 0.5061759840}, {31.1264096947, 5.2076501780, 0.5366542120}, {31.9779100831, 5.7319302661, 0.5671324401}, {32.8130385056, 6.2819151581, 0.5976106681}, {33.6310191337, 6.8570939555, 0.6280888961}, {34.4310919617, 7.4569322091, 0.6585671241}, {35.2125139043, 8.0808728057, 0.6890453521}, {35.9745594533, 8.7283364490, 0.7195235801}, {36.7165207029, 9.3987216818, 0.7500018082}, {37.4377084030, 10.0914057769, 0.7804800362}, {38.1374524613, 10.8057450858, 0.8109582642}, {38.8151030240, 11.5410762017, 0.8414364922}, {39.4700309197, 12.2967163967, 0.8719147202}, {40.1016277078, 13.0719636812, 0.9023929482}, {40.7093066773, 13.8660979295, 0.9328711763}, {41.2925032001, 14.6783812238, 0.9633494043}, {41.8506756962, 15.5080592479, 0.9938276323}, {42.3833059123, 16.3543616567, 1.0243058603}, {42.8898989934, 17.2165021950, 1.0547840883}, {43.3699843561, 18.0936800243, 1.0852623163}, {43.8231159345, 18.9850800757, 1.1157405444}, {44.2488729560, 19.8898746105, 1.1462187724}, {44.6468600998, 20.8072235101, 1.1766970004}, {45.0167075822, 21.7362744791, 1.2071752284}, {45.3580718496, 22.6761645205, 1.2376534564}, {45.6706357395, 23.6260203229, 1.2681316844}, {45.9541090222, 24.5849599092, 1.2986099125}, {46.2082284786, 25.5520928475, 1.3290881405}, {46.4327579805, 26.5265205635, 1.3595663685}, {46.6274889656, 27.5073378965, 1.3900445965}, {46.7922405212, 28.4936335493, 1.4205228245}, {46.9268596730, 29.4844917450, 1.4510010525}, {47.0312214152, 30.4789923649, 1.4814792806}, {47.1052287565, 31.4762113954, 1.5119575086}, {47.1488129633, 32.4752224823, 1.5424357366}, {47.1619335539, 33.4750974782, 1.5729139646}, {47.1445783448, 34.4749080258, 1.6033921926}, {47.0967634548, 35.4737256353, 1.6338704206}, {47.0185332808, 36.4706222873, 1.6643486487}, {46.9099605175, 37.4646718952, 1.6948268767}, {46.7711460364, 38.4549509840, 1.7253051047}, {46.6022187193, 39.4405401252, 1.7557833327}, {46.4033354555, 40.4205239704, 1.7862615607}, {46.1746810223, 41.3939919314, 1.8167397887}, {45.9164678276, 42.3600397820, 1.8472180168}, {45.6289356901, 43.3177702908, 1.8776962448}, {45.3123516450, 44.2662940050, 1.9081744728}, {44.9670113610, 45.2047303217, 1.9386426547}, {44.5932880124, 46.1322295518, 1.9689844865}, {44.1917254549, 47.0480194203, 1.9990211225}, {43.7630440723, 47.9514351801, 2.0285764694}, {43.3081300096, 48.8419316686, 2.0574801616}, {42.8280163252, 49.7190999644, 2.0855695879}, {42.3238610462, 50.5826777559, 2.1126918275}, {41.7969322118, 51.4325540655, 2.1387054689}, {41.2485836000, 52.2687730951, 2.1634822933}, {40.6802322484, 53.0915313642, 2.1869088003}, {40.0933429071, 53.9011736614, 2.2088875583}, {39.4894045627, 54.6981828565, 2.2293383644}, {38.8699122855, 55.4831666110, 2.2481991986}, {38.2363538073, 56.2568454810, 2.2654269616}, {37.5901910200, 57.0200319982, 2.2809979882}, {36.9328475592, 57.7736121500, 2.2949083286}, {36.2656986148, 58.5185282328, 2.3071737954}, {35.5900581113, 59.2557531801, 2.3178297756}, {34.9071707852, 59.9862718827, 2.3269308093}, {34.2182047123, 60.7110623431, 2.3345499407}, {33.5242423956, 61.4310714567, 2.3407778491}, {32.8262753282, 62.1471996983, 2.3457217694}, {32.1251979667, 62.8602842499, 2.3495042163}, {31.4218007841, 63.5710808065, 2.3522615261}, {30.7167660684, 64.2802533202, 2.3541422347}, {30.0106626581, 64.9883620382, 2.3553053095}, {29.3039406525, 65.6958533476, 2.3559182578}, {28.5969285151, 66.4030547544, 2.3561551338}, {27.8898293334, 67.1101691352, 2.3561944667}, {27.8248557837, 67.1751442163, 2.3561944902},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class C180: public FastTrajectory {
  public:
    C180(bool mirror = false) : mirror(mirror) {}
    const float velocity = 5.554092772151779f;
    const float straight = 26.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 179;
    }
    virtual Position position(int index) const {
      static const float data[179 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999994, 0.0000030936, 0.0000123729}, {1.9999999963, 0.0000493829, 0.0000988858}, {2.9999999802, 0.0002501505, 0.0003331924}, {3.9999998213, 0.0007894354, 0.0007879764}, {4.9999991055, 0.0019233319, 0.0015344754}, {5.9999970048, 0.0039784877, 0.0026420129}, {6.9999912541, 0.0073501408, 0.0041775437}, {7.9999777669, 0.0124979437, 0.0062052144}, {8.9999496716, 0.0199446868, 0.0087859432}, {9.9998960810, 0.0302726899, 0.0119770192}, {10.9997996003, 0.0441196362, 0.0158317275}, {11.9996356159, 0.0621726290, 0.0203989991}, {12.9993699806, 0.0851664862, 0.0257230899}, {13.9989564123, 0.1138778516, 0.0318432904}, {14.9983331821, 0.1491190293, 0.0387936680}, {15.9974221382, 0.1917314120, 0.0466028434}, {16.9961252258, 0.2425829187, 0.0552938028}, {17.9943213589, 0.3025602090, 0.0648837473}, {18.9918636224, 0.3725607833, 0.0753839796}, {19.9885781516, 0.4534869365, 0.0867998303}, {20.9842608034, 0.5462415327, 0.0991306227}, {21.9786752231, 0.6517195440, 0.1123696775}, {22.9715515878, 0.7707987187, 0.1265043560}, {23.9625860335, 0.9043350590, 0.1415161437}, {24.9514393367, 1.0531567534, 0.1573807716}, {25.9377380181, 1.2180561336, 0.1740683750}, {26.9210747094, 1.3997805227, 0.1915436901}, {27.9010096168, 1.5990293905, 0.2097662848}, {28.8770724963, 1.8164475636, 0.2286908244}, {29.8487676557, 2.0526186035, 0.2482673685}, {30.8155753831, 2.3080583732, 0.2684416995}, {31.7769567264, 2.5832133804, 0.2891556773}, {32.7323591049, 2.8784552724, 0.3103476214}, {33.6812237908, 3.1940773873, 0.3319527157}, {34.6229881408, 3.5302922773, 0.3539034331}, {35.5570937309, 3.8872311255, 0.3761299791}, {36.4829941973, 4.2649420020, 0.3985607496}, {37.4001620590, 4.6633905517, 0.4211228003}, {38.3080928665, 5.0824597468, 0.4437424672}, {39.2063105357, 5.5219622779, 0.4663678916}, {40.0943551725, 5.9816731115, 0.4889933160}, {40.9717721914, 6.4613569233, 0.5116187404}, {41.8381125680, 6.9607682318, 0.5342441648}, {42.6929328393, 7.4796513982, 0.5568695892}, {43.5357959359, 8.0177412137, 0.5794950136}, {44.3662700980, 8.5747619980, 0.6021204380}, {45.1839293968, 9.1504279900, 0.6247458624}, {45.9883551020, 9.7444443661, 0.6473712869}, {46.7791356820, 10.3565072397, 0.6699967113}, {47.5558668035, 10.9863036613, 0.6926221357}, {48.3181513320, 11.6335116187, 0.7152475601}, {49.0655993316, 12.2978000371, 0.7378729845}, {49.7978280648, 12.9788287786, 0.7604984089}, {50.5144619927, 13.6762486427, 0.7831238333}, {51.2151344167, 14.3897029183, 0.8057492577}, {51.8994868949, 15.1188264838, 0.8283746821}, {52.5671684582, 15.8632453130, 0.8510001065}, {53.2178371858, 16.6225781631, 0.8736255309}, {53.8511602051, 17.3964365739, 0.8962509553}, {54.4668136916, 18.1844248685, 0.9188763797}, {55.0644828687, 18.9861401530, 0.9415018041}, {55.6438620084, 19.8011723164, 0.9641272285}, {56.2046544305, 20.6291040308, 0.9867526529}, {56.7465725030, 21.4695107515, 1.0093780773}, {57.2693388938, 22.3219625976, 1.0320035017}, {57.7726862035, 23.1860233442, 1.0546289261}, {58.2563563132, 24.0612497654, 1.0772543505}, {58.7201015399, 24.9471936320, 1.0998797749}, {59.1636846378, 25.8434017117, 1.1225051993}, {59.5868787970, 26.7494157687, 1.1451306237}, {59.9894676444, 27.6647725639, 1.1677560481}, {60.3712452436, 28.5890038551, 1.1903814725}, {60.7320160943, 29.5216363968, 1.2130068969}, {61.0715951329, 30.4621919401, 1.2356323213}, {61.3898085303, 31.4101893467, 1.2582577457}, {61.6864935599, 32.3651435242, 1.2808831701}, {61.9614981096, 33.3265646395, 1.3035085945}, {62.2146813599, 34.2939603249, 1.3261340189}, {62.4459137844, 35.2668356780, 1.3487594433}, {62.6550771494, 36.2446932619, 1.3713848677}, {62.8420645144, 37.2270331054, 1.3940102922}, {63.0067802315, 38.2133527024, 1.4166357166}, {63.1491399459, 39.2031470124, 1.4392611410}, {63.2690705956, 40.1959084605, 1.4618865654}, {63.3665107147, 41.1911291759, 1.4845119898}, {63.4414105445, 42.1882999253, 1.5071374142}, {63.4937317332, 43.1869092366, 1.5297628386}, {63.5234475025, 44.1864457008, 1.5523882630}, {63.5305426482, 45.1863979725, 1.5750136874}, {63.5150135393, 46.1862547695, 1.5976391118}, {63.4768681188, 47.1855048732, 1.6202645362}, {63.4161259031, 48.1836371280, 1.6428899606}, {63.3328179824, 49.1801404420, 1.6655153850}, {63.2269870206, 50.1745037866, 1.6881408094}, {63.0986870485, 51.1662184463, 1.7107662338}, {62.9479838110, 52.1547770041, 1.7333916582}, {62.7749546717, 53.1396724200, 1.7560170826}, {62.5796882589, 54.1204003121, 1.7786425070}, {62.3622844650, 55.0964589564, 1.8012679314}, {62.1228544471, 56.0673492872, 1.8238933558}, {61.8615206268, 57.0325748966, 1.8465187802}, {61.5784166900, 57.9916420349, 1.8691442046}, {61.2736875872, 58.9440596105, 1.8917696290}, {60.9474895333, 59.8893391899, 1.9143950534}, {60.5999893016, 60.8269971436, 1.9370204778}, {60.2313647898, 61.7565537353, 1.9596459022}, {59.8418051333, 62.6775322027, 1.9822713266}, {59.4315098489, 63.5894609005, 2.0048967510}, {59.0006888345, 64.4918733009, 2.0275221754}, {58.5495623689, 65.3843079931, 2.0501475998}, {58.0783611121, 66.2663086837, 2.0727730242}, {57.5873261051, 67.1374241966, 2.0953984486}, {57.0767087703, 67.9972084730, 2.1180238730}, {56.5467709108, 68.8452205711, 2.1406492974}, {55.9977835415, 69.6810265997, 2.1632747219}, {55.4300276447, 70.5041989569, 2.1859001463}, {54.8437944872, 71.3143154598, 2.2085255707}, {54.2393843042, 72.1109612412, 2.2311509951}, {53.6171062996, 72.8937287494, 2.2537764195}, {52.9772786460, 73.6622177483, 2.2764018439}, {52.3202284844, 74.4160353176, 2.2990272683}, {51.6462919244, 75.1547958525, 2.3216526927}, {50.9558140441, 75.8781210638, 2.3442781171}, {50.2491488903, 76.5856399780, 2.3669035415}, {49.5266579050, 77.2769905586, 2.3895289659}, {48.7887108326, 77.9518191341, 2.4121543903}, {48.0356862243, 78.6097796212, 2.4347798147}, {47.2679697301, 79.2505350776, 2.4574052391}, {46.4859540990, 79.8737577019, 2.4800306635}, {45.6900391789, 80.4791288341, 2.5026560879}, {44.8806319164, 81.0663389551, 2.5252815123}, {44.0581463573, 81.6350876869, 2.5479069367}, {43.2230036460, 82.1850837925, 2.5705323611}, {42.3756320258, 82.7160451761, 2.5931577855}, {41.5164656019, 83.2276997874, 2.6157832099}, {40.6459436964, 83.7197860784, 2.6384086343}, {39.7645118873, 84.1920521736, 2.6610340587}, {38.8726213318, 84.6442563460, 2.6836594831}, {37.9707279120, 85.0761656249, 2.7062848677}, {37.0592963878, 85.4875668749, 2.7288916299}, {36.1388131192, 85.8782936045, 2.7514133325}, {35.2097909856, 86.2482602624, 2.7737764350}, {34.2727652452, 86.5974632539, 2.7959084371}, {33.3282881655, 86.9259813107, 2.8177383549}, {32.3769208797, 87.2339765541, 2.8391971866}, {31.4192243553, 87.5216917355, 2.8602183646}, {30.4557559672, 87.7894494050, 2.8807381931}, {29.4870640744, 88.0376493451, 2.9006962655}, {28.5136812574, 88.2667655058, 2.9200358607}, {27.5361181815, 88.4773390147, 2.9387043153}, {26.5548616791, 88.6699762065, 2.9566533693}, {25.5703710112, 88.8453430840, 2.9738394826}, {24.5830741792, 89.0041592247, 2.9902241206}, {23.5933658992, 89.1471884278, 3.0057740071}, {22.6016070333, 89.2752363656, 3.0204613425}, {21.6081236267, 89.3891428998, 3.0342639863}, {20.6132066460, 89.4897745561, 3.0471656026}, {19.6171134532, 89.5780148166, 3.0591557665}, {18.6200681536, 89.6547618081, 3.0702300336}, {17.6222633631, 89.7209196969, 3.0803899682}, {16.6238624143, 89.7773911381, 3.0896431336}, {15.6250026114, 89.8250686257, 3.0980030421}, {14.6257960436, 89.8648323606, 3.1054890666}, {13.6263329921, 89.8975418659, 3.1121263137}, {12.6266849713, 89.9240293153, 3.1179454583}, {11.6269079836, 89.9450926584, 3.1229825431}, {10.6270434116, 89.9614937005, 3.1272787416}, {9.6271215185, 89.9739508073, 3.1308800881}, {8.6271638648, 89.9831336401, 3.1338371760}, {7.6271854685, 89.9896583183, 3.1362048254}, {6.6271954784, 89.9940857867, 3.1380417236}, {5.6271995375, 89.9969162660, 3.1394100402}, {4.6272009027, 89.9985857991, 3.1403750190}, {3.6272013419, 89.9994634684, 3.1410045501}, {2.6272014262, 89.9998503173, 3.1413687245}, {1.6272014319, 89.9999758529, 3.1415393740}, {0.6272014332, 89.9999970453, 3.1415896002}, {0.0000000000, 90.0000000000, 3.1415926536},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class FV90: public FastTrajectory {
  public:
    FV90(bool mirror = false) : mirror(mirror) {}
    const float velocity = 419.9236118074793f;
    const float straight = 15.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 83;
    }
    virtual Position position(int index) const {
      static const float data[83 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999978, 0.0000071568, 0.0000286216}, {1.9999999870, 0.0001143092, 0.0002285784}, {2.9999998854, 0.0005779954, 0.0007692402}, {3.9999990334, 0.0018216361, 0.0018160675}, {4.9999955031, 0.0044319500, 0.0035287142}, {5.9999841652, 0.0091519098, 0.0060591950}, {6.9999537597, 0.0168706078, 0.0095501418}, {7.9998839458, 0.0286156966, 0.0141331676}, {8.9997394207, 0.0455399516, 0.0199273559}, {9.9994640984, 0.0689064020, 0.0270378948}, {10.9989752514, 0.1000770676, 0.0355548704}, {11.9981540763, 0.1404938094, 0.0455522329}, {12.9968384651, 0.1916603174, 0.0570869483}, {13.9948153535, 0.2551273659, 0.0701983452}, {14.9918109918, 0.3324691101, 0.0849076628}, {15.9874850197, 0.4252635967, 0.1012178081}, {16.9814241003, 0.5350750397, 0.1191133219}, {17.9731368295, 0.6634276424, 0.1385605566}, {18.9620519279, 0.8117866230, 0.1595080618}, {19.9475174038, 0.9815389616, 0.1818871752}, {20.9288043943, 1.1739683472, 0.2056128095}, {21.9051113487, 1.3902391726, 0.2305844294}, {22.8755721988, 1.6313787724, 0.2566872047}, {23.8392704566, 1.8982584162, 0.2837933273}, {24.7952495916, 2.1915828215, 0.3117634785}, {25.7425305623, 2.5118782609, 0.3404484262}, {26.6801335203, 2.8594842353, 0.3696907381}, {27.6070921198, 3.2345502783, 0.3993265869}, {28.5224783930, 3.6370346244, 0.4291876309}, {29.4254211812, 4.0667085661, 0.4591120983}, {30.3151034626, 4.5232069975, 0.4890374711}, {31.1907285533, 5.0061211377, 0.5189628438}, {32.0515123802, 5.5150185642, 0.5488882166}, {32.8966841238, 6.0494435667, 0.5788135894}, {33.7254869895, 6.6089176035, 0.6087389621}, {34.5371787950, 7.1929396728, 0.6386643349}, {35.3310327176, 7.8009868167, 0.6685897077}, {36.1063378847, 8.4325145475, 0.6985150804}, {36.8624000392, 9.0869573552, 0.7284404532}, {37.5985421651, 9.7637292189, 0.7583658259}, {38.3141050613, 10.4622241023, 0.7882911987}, {39.0084479879, 11.1818165489, 0.8182165715}, {39.6809491686, 11.9218621716, 0.8481419442}, {40.3310064209, 12.6816983063, 0.8780673170}, {40.9580376337, 13.4606445374, 0.9079926897}, {41.5614813285, 14.2580033532, 0.9379180625}, {42.1407971469, 15.0730607529, 0.9678434353}, {42.6954663263, 15.9050868728, 0.9977688080}, {43.2249921946, 16.7533366848, 1.0276941808}, {43.7289005674, 17.6170505910, 1.0576195535}, {44.2067402274, 18.4954551909, 1.0875449263}, {44.6580832803, 19.3877638948, 1.1174702991}, {45.0825256345, 20.2931776590, 1.1473918836}, {45.4797208739, 21.2108717401, 1.1772226626}, {45.8494747947, 22.1399616102, 1.2067954356}, {46.1917826913, 23.0795120519, 1.2359425844}, {46.5068307809, 24.0285521667, 1.2645013737}, {46.7949957244, 24.9860988456, 1.2923158183}, {47.0568380239, 25.9511784528, 1.3192384728}, {47.2930959500, 26.9228401506, 1.3451321231}, {47.5046731170, 27.9001751515, 1.3698713606}, {47.6926226377, 28.8823305620, 1.3933440210}, {47.8581347605, 29.8685176703, 1.4154524713}, {48.0025154272, 30.8580219088, 1.4361147297}, {48.1271659936, 31.8502071447, 1.4552654062}, {48.2335668145, 32.8445175286, 1.4728564529}, {48.3232515003, 33.8404771149, 1.4888577151}, {48.3977865387, 34.8376866665, 1.5032572777}, {48.4587532172, 35.8358197261, 1.5160616010}, {48.5077219913, 36.8346148514, 1.5272954477}, {48.5462346464, 37.8338688341, 1.5370015978}, {48.5757865790, 38.8334293968, 1.5452403584}, {48.5978043088, 39.8331850478, 1.5520888717}, {48.6136312823, 40.8330583662, 1.5576402299}, {48.6245121223, 41.8329985010, 1.5620024070}, {48.6315750775, 42.8329730918, 1.5652970204}, {48.6358217979, 43.8329637821, 1.5676579354}, {48.6381150117, 44.8329611104, 1.5692297293}, {48.6391670504, 45.8329605053, 1.5701660331}, {48.6395337832, 46.8329604270, 1.5706277682}, {48.6396069348, 47.8329604238, 1.5707813011}, {48.6396103068, 48.6396103135, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class FastRun: TaskBase {
  public:
    FastRun() : TaskBase("FastRun", FAST_RUN_TASK_PRIORITY, FAST_RUN_STACK_SIZE) {}
    virtual ~FastRun() {}
    enum FAST_ACTION : char {
      FAST_GO_STRAIGHT = 's',
      FAST_GO_HALF = 'x',
      FAST_DIAGONAL_LEFT = 'w',
      FAST_DIAGONAL_RIGHT = 'W',
      FAST_TURN_LEFT_45 = 'z',
      FAST_TURN_RIGHT_45 = 'c',
      FAST_TURN_LEFT_45R = 'Z',
      FAST_TURN_RIGHT_45R = 'C',
      FAST_TURN_LEFT_90 = 'l',
      FAST_TURN_RIGHT_90 = 'r',
      FAST_TURN_LEFT_V90 = 'q',
      FAST_TURN_RIGHT_V90 = 'e',
      FAST_TURN_LEFT_135 = 'a',
      FAST_TURN_RIGHT_135 = 'd',
      FAST_TURN_LEFT_135R = 'A',
      FAST_TURN_RIGHT_135R = 'D',
      FAST_TURN_LEFT_180 = 'Q',
      FAST_TURN_RIGHT_180 = 'E',
    };
    struct RunParameter {
      RunParameter(const float curve_gain = 0.5, const float max_speed = 600, const float accel = 3000, const float decel = 2000): curve_gain(curve_gain), max_speed(max_speed), accel(accel), decel(decel) {}
      float curve_gain;
      float max_speed;
      float accel, decel;
      const RunParameter& operator=(const RunParameter& obj) {
        curve_gain = obj.curve_gain; max_speed = obj.max_speed; accel = obj.accel; decel = obj.decel;
        return *this;
      }
    };
  public:
    RunParameter runParameter;
    bool wallAvoidFlag = true;
    bool wallAvoid45Flag = true;
    bool wallCutFlag = true;
    void enable() {
      printf("FastRun Enabled\n");
      delete_task();
      create_task();
    }
    void disable() {
      delete_task();
      sc.disable();
      path = "";
      printf("FastRun Disabled\n");
    }
    void set_action(FAST_ACTION action, const int num = 1) {
      for (int i = 0; i < num; i++) path += (char)action;
    }
    void set_path(String path) {
      this->path = path;
    }
    String get_last_path() {
      return last_path;
    }
    int actions() const {
      return path.length();
    }
    void waitForEnd() const {
      while (actions()) {
        delay(1);
      }
    }
    void printPosition(const char* name) const {
      printf("%s\tRel:(%06.1f, %06.1f, %06.3f)\t", name, getRelativePosition().x, getRelativePosition().y, getRelativePosition().theta);
      printf("Abs:(%06.1f, %06.1f, %06.3f)\n", sc.position.x, sc.position.y, sc.position.theta);
    }
    Position getRelativePosition() const {
      return (sc.position - origin).rotate(-origin.theta);
    }
    void updateOrigin(Position passed) {
      origin += passed.rotate(origin.theta);
    }
    void setPosition(Position pos = Position(SEGMENT_WIDTH / 2, WALL_THICKNESS / 2 + MACHINE_TAIL_LENGTH, M_PI / 2)) {
      origin = pos;
      sc.position = pos;
    }
  private:
    Position origin;
    String path, last_path;
    bool prev_wall[2];

    void wallAvoid() {
      // 90 [deg] の倍数
      if (wallAvoidFlag && (int)(fabs(origin.theta) * 180.0f / PI + 1) % 90 < 2) {
        const float gain = 0.0003f;
        const float satu = 0.25f;
        if (ref.side(0) > 60) sc.position += Position(0, std::max(std::min(wd.wall_diff.side[0] * gain, satu), -satu), 0).rotate(origin.theta);
        if (ref.side(1) > 60) sc.position -= Position(0, std::max(std::min(wd.wall_diff.side[1] * gain, satu), -satu), 0).rotate(origin.theta);
        led = 9;
      }
      // 45 [deg] の倍数
      if (wallAvoid45Flag && (int)(fabs(origin.theta) * 180.0f / PI + 45 + 1) % 90 < 2) {
        const float gain = 0.0005f;
        const int16_t threashold = 480;
        if (ref.side(0) > threashold) sc.position += Position(0, (ref.side(0) - threashold) * gain, 0).rotate(origin.theta);
        if (ref.side(1) > threashold) sc.position -= Position(0, (ref.side(1) - threashold) * gain, 0).rotate(origin.theta);
        led = 6;
      }
    }
    void wallCut() {
      if (wallCutFlag) {
        // 90 [deg] の倍数
        if ((int)(fabs(origin.theta) * 180.0f / PI + 1) % 90 < 2) {
          for (int i = 0; i < 2; i++) {
            if (prev_wall[i] && !wd.wall[i]) {
              Position prev = sc.position;
              Position fix = sc.position.rotate(-origin.theta);
              fix.x = floor((fix.x + 45) / 90) * 90 - 20;
              sc.position = fix.rotate(origin.theta);
              printf("WallCut[%d] X_ (%.1f, %.1f, %.1f) => (%.1f, %.1f, %.1f)\n", i, prev.x, prev.y, prev.theta * 180.0f / PI, sc.position.x, sc.position.y, sc.position.theta * 180 / PI);
            }
            if (!prev_wall[i] && wd.wall[i]) {
              Position prev = sc.position;
              Position fix = sc.position.rotate(-origin.theta);
              fix.x = floor((fix.x + 45) / 90) * 90 - 30;
              sc.position = fix.rotate(origin.theta);
              printf("WallCut[%d] _X (%.1f, %.1f, %.1f) => (%.1f, %.1f, %.1f)\n", i, prev.x, prev.y, prev.theta * 180.0f / PI, sc.position.x, sc.position.y, sc.position.theta * 180 / PI);
            }
            prev_wall[i] = wd.wall[i];
          }
        }
      }
    }
    void straight_x(const float distance, const float v_max, const float v_end) {
      const float accel = runParameter.accel;
      const float decel = runParameter.decel;
      int ms = 0;
      const float v_start = sc.actual.trans;
      const float T = 1.5f * (v_max - v_start) / accel;
      portTickType xLastWakeTime = xTaskGetTickCount();
      for (int i = 0; i < 2; i++) prev_wall[i] = wd.wall[i];
      while (1) {
        Position cur = getRelativePosition();
        if (v_end >= 1.0f && cur.x > distance - FAST_LOOK_AHEAD) break;
        if (v_end < 1.0f && cur.x > distance - 1.0f) break;
        float extra = distance - cur.x;
        float velocity_a = v_start + (v_max - v_start) * 6.0f * (-1.0f / 3 * pow(ms / 1000.0f / T, 3) + 1.0f / 2 * pow(ms / 1000.0f / T, 2));
        float velocity_d = sqrt(2 * decel * fabs(extra) + v_end * v_end);
        float velocity = v_max;
        if (velocity > velocity_d) velocity = velocity_d;
        if (ms / 1000.0f < T && velocity > velocity_a) velocity = velocity_a;
        float theta = atan2f(-cur.y, FAST_LOOK_AHEAD * (1 + velocity / 600)) - cur.theta;
        sc.set_target(velocity, FAST_PROP_GAIN * theta);
        wallAvoid();
        wallCut();
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        ms++;
      }
      sc.set_target(v_end, 0);
      updateOrigin(Position(distance, 0, 0));
      printPosition("Straight End");
    }
    template<class C>
    void trace(C tr, const float velocity) {
      portTickType xLastWakeTime = xTaskGetTickCount();
      while (1) {
        if (tr.getRemain() < FAST_LOOK_AHEAD) break;
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        Position dir = tr.getNextDir(getRelativePosition());
        sc.set_target(velocity, FAST_PROP_GAIN * dir.theta);
        //        wallAvoid();
        //        wallCut();
      }
      sc.set_target(velocity, 0);
      updateOrigin(tr.getEndPosition());
      printPosition("Trace End");
    }
    virtual void task() {
      // スタートとゴールの半区画分を追加
      if (path[0] != 'x' && path[0] != 'c' && path[0] != 'z') {
        path = "x" + path + "x";
      }

      printf("Input Path: %s\n", path.c_str());
      path.replace("s", "xx");
      path.replace("l", "LL");
      path.replace("r", "RR");

      path.replace("RLLLLR", "RLqLR");
      path.replace("LRRRRL", "LReRL");

      path.replace("xLLR", "zLR");
      path.replace("xRRL", "cRL");
      path.replace("LRRx", "LRC");
      path.replace("RLLx", "RLZ");

      path.replace("xLLLLR", "aLR");
      path.replace("xRRRRL", "dRL");
      path.replace("RLLLLx", "RLA");
      path.replace("LRRRRx", "LRD");

      path.replace("xLLLLx", "Q");
      path.replace("xRRRRx", "E");

      path.replace("RLLR", "RLwLR");
      path.replace("LRRL", "LRWRL");

      path.replace("RL", "");
      path.replace("LR", "");
      path.replace("xRRx", "r");
      path.replace("xLLx", "l");
      printf("Running Path: %s\n", path.c_str());

      const float v_max = runParameter.max_speed;
      const float curve_gain = runParameter.curve_gain;
      // 壁に背中を確実につける
      mt.drive(-200, -200);
      delay(200);
      mt.free();
      // 走行開始
      fan.drive(0.3);
      delay(500); //< ファンの回転数が一定なるのを待つ
      setPosition();
      sc.enable(false); //< 速度コントローラ始動
      float straight = SEGMENT_WIDTH / 2 - MACHINE_TAIL_LENGTH - WALL_THICKNESS / 2;
      for (int path_index = 0; path_index < path.length(); path_index++) {
        //        printPosition(String(path[path_index]).c_str());
        printf("FastRun: %c, st => %.1f\n", path[path_index], straight);
        switch (path[path_index]) {
          case FAST_TURN_LEFT_45: {
              F45 tr(false);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_RIGHT_45: {
              F45 tr(true);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_LEFT_45R: {
              F45 tr(false);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_RIGHT_45R: {
              F45 tr(true);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_LEFT_V90: {
              FV90 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_V90: {
              FV90 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_90: {
              F90 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_90: {
              F90 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_135: {
              F135 tr(false);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_RIGHT_135: {
              F135 tr(true);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_LEFT_135R: {
              F135 tr(false);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_RIGHT_135R: {
              F135 tr(true);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_LEFT_180: {
              C180 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_180: {
              C180 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain);
                straight = 0;
              }
              trace(tr, sc.actual.trans);
              straight += tr.straight;
            }
            break;
          case FAST_GO_STRAIGHT:
            straight += SEGMENT_WIDTH;
            break;
          case FAST_GO_HALF:
            straight += SEGMENT_WIDTH / 2;
            break;
          case FAST_DIAGONAL_LEFT:
          case FAST_DIAGONAL_RIGHT:
            straight += SEGMENT_DIAGONAL_WIDTH / 2;
            break;
        }
      }
      printf("FastRun: end, st => %.1f\n", straight);
      if (straight > 1.0f) {
        straight_x(straight, v_max, 0);
        straight = 0;
      }
      sc.set_target(0, 0);
      fan.drive(0);
      delay(100);
      sc.disable();
      bz.play(Buzzer::COMPLETE);
      last_path = path;
      path = "";
      while (1) {
        delay(1000);
      }
    }
};

extern FastRun fr;

