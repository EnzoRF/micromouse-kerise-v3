#pragma once

#include <Arduino.h>
#include <vector>
#include <queue>
#include "TaskBase.h"
#include "config.h"

#include "logger.h"
#include "as5145.h"
#include "motor.h"
#include "mpu6500.h"
#include "reflector.h"
#include "WallDetector.h"
#include "SpeedController.h"

#define WALL_ATTACH_ENABLED     false
#define WALL_AVOID_ENABLED      true
#define WALL_AVOID_GAIN         0.00002f

#define LOOK_AHEAD_UNIT         10
//#define LOOK_AHEAD_UNIT_SUCTION (2 + velocity / 900 * 5)
#define LOOK_AHEAD_UNIT_SUCTION 10
#define TRAJECTORY_PROP_GAIN    80
#define TRAJECTORY_INT_GAIN     0.0

class Trajectory {
  public:
    Trajectory(bool suction): suction(suction) {
      reset();
    }
    virtual ~Trajectory() {
    }
    void reset() {
      last_index = -10;
    }
    Position getNextDir(const Position &cur, float velocity) {
      int index_cur = getNextIndex(cur);
      int look_ahead = LOOK_AHEAD_UNIT;
      if (suction)look_ahead = LOOK_AHEAD_UNIT_SUCTION;
      Position dir = (getPosition(index_cur + look_ahead) - cur).rotate(-cur.theta);
      dir.theta = atan2f(dir.y, dir.x);
      return dir;
    }
    float getRemain() const {
      return (getSize() - last_index) * interval;
    }
    Position getEndPosition() {
      return getPosition(getSize());
    }
  protected:
    int last_index;
    const float interval = 1.0f;
    bool suction;
    virtual int size() const {
      return 180;
    }
    virtual Position position(int index) const {
      return Position(index * interval, 0, 0);
    }
    int getSize() const {
      return size();
    }
    Position getPosition(const int index) {
      return position(index);
    }
    int getNextIndex(const Position& pos) {
      for (int i = last_index;; i++) {
        Position target = getPosition(i);
        Position dir = (target - pos).rotate(-target.theta);
        if (dir.x > 0) {
          last_index = i;
          return last_index;
        }
      }
      return last_index;
    }
};

class S90: public Trajectory {
  public:
    S90(bool mirror = false) : Trajectory(false), mirror(mirror) {}
    const float velocity = 120.0f;
    const float straight = 10.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 60;
    }
    virtual Position position(int index) const {
      static const float data[60 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999948, 0.0000141258, 0.0000564894}, {1.9999999666, 0.0002256098, 0.0004509405}, {2.9999995222, 0.0011398968, 0.0015164550}, {3.9999962330, 0.0035901239, 0.0035764853}, {4.9999827250, 0.0087275362, 0.0069401829}, {5.9999386269, 0.0180021210, 0.0118979532}, {6.9998218994, 0.0331431644, 0.0187172793}, {7.9995545553, 0.0561352722, 0.0276388761}, {8.9990026890, 0.0891841370, 0.0388732287}, {9.9979591207, 0.1346894291, 0.0525975657}, {10.9961153446, 0.1952034107, 0.0689533106}, {11.9930386080, 0.2733891065, 0.0880440487}, {12.9881468639, 0.3719815796, 0.1099340369}, {13.9806819155, 0.4937308532, 0.1346472802}, {14.9696928202, 0.6413592371, 0.1621671863}, {15.9540181872, 0.8175056811, 0.1924368044}, {16.9322789605, 1.0246664326, 0.2253596438}, {17.9028778886, 1.2651503980, 0.2608010616}, {18.8640121080, 1.5410168389, 0.2985901990}, {19.8136908997, 1.8540307587, 0.3385224376}, {20.7497671653, 2.2056189697, 0.3803623424}, {21.6699838792, 2.5968285210, 0.4238470469}, {22.5720151378, 3.0283040252, 0.4686900330}, {23.4535338303, 3.5002670955, 0.5145852510}, {24.3122676785, 4.0125124574, 0.5612115208}, {25.1460656902, 4.5644150347, 0.6082371497}, {25.9529590425, 5.1549555645, 0.6553555382}, {26.7311416111, 5.7828463900, 0.7024742720}, {27.4788860145, 6.4466937418, 0.7495930058}, {28.1945324360, 7.1450240349, 0.7967117397}, {28.8764923095, 7.8762871410, 0.8438304735}, {29.5232518445, 8.6388598279, 0.8909492073}, {30.1333753875, 9.4310493642, 0.9380679411}, {30.7055107265, 10.2510958598, 0.9851702039}, {31.2384733041, 11.0971270565, 1.0320459270}, {31.7314266876, 11.9670788754, 1.0783619937}, {32.1839463848, 12.8587377070, 1.1237911723}, {32.5960318401, 13.7697930887, 1.1680189839}, {32.9681086672, 14.6979129640, 1.2107482249}, {33.3010175643, 15.6407981758, 1.2517032404}, {33.5959937794, 16.5962362533, 1.2906338882}, {33.8546287676, 17.5621534746, 1.3273191357}, {34.0788369798, 18.5366445839, 1.3615702381}, {34.2708036724, 19.5180034576, 1.3932334528}, {34.4329325787, 20.5047374223, 1.4221922498}, {34.5677989105, 21.4955726972, 1.4483689875}, {34.6780846709, 22.4894496349, 1.4717260292}, {34.7665336216, 23.4855124683, 1.4922662843}, {34.8358960525, 24.4830912406, 1.5100331663}, {34.8888752312, 25.4816769949, 1.5251099688}, {34.9280892487, 26.4809014803, 1.5376186675}, {34.9560202497, 27.4805071179, 1.5477181665}, {34.9749792386, 28.4803245674, 1.5556020130}, {34.9870712333, 29.4802502921, 1.5614956146}, {34.9941595439, 30.4802243208, 1.5656529975}, {34.9978435224, 31.4802172139, 1.5683531544}, {34.9994319410, 32.4802159134, 1.5698960319}, {34.9999245452, 33.4802157416, 1.5705982181}, {34.9999988313, 34.4802157382, 1.5707883896}, {35.0000000000, 35.0000000000, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F45: public Trajectory {
  public:
    F45(bool mirror = false) : Trajectory(true), mirror(mirror) {}
    const float velocity = 833.4285399219866f;
    const float straight = 18.639610409494697f;
  private:
    bool mirror;
    virtual int size() const {
      return 88;
    }
    virtual Position position(int index) const {
      static const float data[88 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999998, 0.0000019585, 0.0000078333}, {1.9999999985, 0.0000311571, 0.0000625652}, {2.9999999920, 0.0001582831, 0.0002110125}, {3.9999999202, 0.0005001910, 0.0004994001}, {4.9999985938, 0.0012191476, 0.0009730994}, {5.9999966223, 0.0025228322, 0.0016766289}, {6.9999944462, 0.0046594723, 0.0026530842}, {7.9999904560, 0.0079262771, 0.0039446013}, {8.9999809919, 0.0126640587, 0.0055918927}, {9.9999603440, 0.0192477632, 0.0076333691}, {10.9999207524, 0.0280864709, 0.0101051396}, {11.9998524069, 0.0396233961, 0.0130410112}, {12.9997426501, 0.0543358873, 0.0164724895}, {13.9995693943, 0.0727354273, 0.0204287780}, {14.9993103940, 0.0953661656, 0.0249367200}, {15.9989343682, 0.1227840527, 0.0300196860}, {16.9983984521, 0.1555812504, 0.0356982161}, {17.9976481968, 0.1943665837, 0.0419898098}, {18.9966175700, 0.2397566666, 0.0489086545}, {19.9952289555, 0.2923759012, 0.0564656246}, {20.9933931530, 0.3528564779, 0.0646682825}, {21.9910069361, 0.4218383758, 0.0735208777}, {22.9879449489, 0.4999693623, 0.0830243474}, {23.9840668026, 0.5878976082, 0.0931763506}, {24.9792129472, 0.6862492011, 0.1039710426}, {25.9732042339, 0.7956579321, 0.1153989022}, {26.9658419151, 0.9167361326, 0.1274473112}, {27.9569076446, 1.0500713892, 0.1401005926}, {28.9461634776, 1.1962265434, 0.1533400099}, {29.9333518705, 1.3557396923, 0.1671437674}, {30.9182004410, 1.5291241878, 0.1814870102}, {31.9004128541, 1.7168686374, 0.1963418243}, {32.8796732522, 1.9194235282, 0.2116779193}, {33.8556569144, 2.1371920748, 0.2274624490}, {34.8280302607, 2.3705448391, 0.2436596426}, {35.7964508524, 2.6198043716, 0.2602320814}, {36.7605673915, 2.8852450727, 0.2771407081}, {37.7200197214, 3.1670931923, 0.2943448267}, {38.6744400937, 3.4655268303, 0.3118021028}, {39.6234755001, 3.7806759360, 0.3294685631}, {40.5667648457, 4.1126223572, 0.3472986465}, {41.5039563059, 4.4613970710, 0.3652468908}, {42.4347168542, 4.8269714206, 0.3832664544}, {43.3587322616, 5.2092681807, 0.4013100288}, {44.2757070970, 5.6081643566, 0.4193307129}, {45.1853647271, 6.0234911845, 0.4372820126}, {46.0874473161, 6.4550341312, 0.4551178410}, {46.9817199644, 6.9025328941, 0.4727925187}, {47.8679908783, 7.3656814016, 0.4902607732}, {48.7460941704, 7.8441315102, 0.5074780421}, {49.6158994710, 8.3375090304, 0.5244021345}, {50.4773137482, 8.8453903707, 0.5409914404}, {51.3302813084, 9.3673269301, 0.5572063557}, {52.1747837960, 9.9028491765, 0.5730095740}, {53.0108401932, 10.4514666472, 0.5883660865}, {53.8385068205, 11.0126679479, 0.6032431822}, {54.6578745375, 11.5859207537, 0.6176104479}, {55.4690767159, 12.1706718084, 0.6314397679}, {56.2722868463, 12.7663579389, 0.6447057934}, {57.0677065610, 13.3724180765, 0.6573866927}, {57.8555655338, 13.9882746227, 0.6694632617}, {58.6361214806, 14.6133543031, 0.6809195841}, {59.4096601593, 15.2470888023, 0.6917430548}, {60.1764953695, 15.8889147636, 0.7019243803}, {60.9369684318, 16.5382737894, 0.7114575784}, {61.6914265874, 17.1946124408, 0.7203399783}, {62.4402423114, 17.8573823374, 0.7285722194}, {63.1838010817, 18.5260537001, 0.7361582195}, {63.9224886369, 19.2001103322, 0.7431056806}, {64.6566909771, 19.8790488154, 0.7494256150}, {65.3867943634, 20.5623862868, 0.7551320963}, {66.1131853180, 21.2496604380, 0.7602422600}, {66.8362506240, 21.9404295156, 0.7647763031}, {67.5563737589, 22.6342723209, 0.7687574841}, {68.2739115977, 23.3307882102, 0.7722121232}, {68.9892170519, 24.0295980539, 0.7751694646}, {69.7026228066, 24.7303532456, 0.7776606918}, {70.4144372623, 25.4327273129, 0.7797203569}, {71.1249445348, 26.1364215286, 0.7813850097}, {71.8344044556, 26.8411669704, 0.7826928437}, {72.5430525714, 27.5467245204, 0.7836836956}, {73.2511001444, 28.2528848649, 0.7843990459}, {73.9587302172, 28.9594684951, 0.7848820185}, {74.6660879391, 29.6663257063, 0.7851773808}, {75.3732895753, 30.3733378848, 0.7853311575}, {76.0804189779, 31.0804220794, 0.7853892067}, {76.7875273593, 31.7875272061, 0.7853981599}, {76.8198050808, 31.8198050808, 0.7853981634},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F90: public Trajectory {
  public:
    F90(bool mirror = false) : Trajectory(true), mirror(mirror) {}
    //    const float velocity = 914.3857602279614f;
    const float velocity = 800.0f;
    const float straight = 10.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 137;
    }
    virtual Position position(int index) const {
      static const float data[137 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999999, 0.0000011834, 0.0000047332}, {1.9999999995, 0.0000188763, 0.0000378499}, {2.9999999971, 0.0000957380, 0.0001276554}, {3.9999999731, 0.0003025602, 0.0003022989}, {4.9999998040, 0.0007380250, 0.0005896957}, {5.9999994718, 0.0015287046, 0.0010174506}, {6.9999987062, 0.0028284625, 0.0016127816}, {7.9999967859, 0.0048186899, 0.0024024453}, {8.9999925385, 0.0077071168, 0.0034126626}, {9.9999843227, 0.0117267369, 0.0046690468}, {10.9999693610, 0.0171358081, 0.0061965332}, {11.9999441388, 0.0242178373, 0.0080193101}, {12.9999031751, 0.0332797561, 0.0101607521}, {13.9998384740, 0.0446521484, 0.0126433563}, {14.9997395252, 0.0586871725, 0.0154886795}, {15.9995932145, 0.0757570408, 0.0187172793}, {16.9993821792, 0.0962540204, 0.0223486575}, {17.9990853648, 0.1205903467, 0.0264012060}, {18.9986757929, 0.1491952075, 0.0308921567}, {19.9981198183, 0.1825153536, 0.0358375335}, {20.9973771286, 0.2210117396, 0.0412521082}, {21.9964005236, 0.2651579006, 0.0471493602}, {22.9951334240, 0.3154399528, 0.0535414391}, {23.9935104806, 0.3723563445, 0.0604391311}, {24.9914549020, 0.4364136840, 0.0678518295}, {25.9888777968, 0.5081278123, 0.0757875088}, {26.9856781728, 0.5880191211, 0.0842527026}, {27.9817426143, 0.6766110287, 0.0932524857}, {28.9769426997, 0.7744299806, 0.1027904602}, {29.9711354793, 0.8820049268, 0.1128687454}, {30.9641615439, 0.9998621843, 0.1234879719}, {31.9558446591, 1.1285268315, 0.1346472802}, {32.9459917650, 1.2685170254, 0.1463443228}, {33.9343927854, 1.4203427393, 0.1585752707}, {34.9208190518, 1.5845057622, 0.1713348240}, {35.9050235343, 1.7614988306, 0.1846162266}, {36.8867409534, 1.9518000355, 0.1984112844}, {37.8656877330, 2.1558742398, 0.2127103886}, {38.8415620009, 2.3741672994, 0.2275025413}, {39.8140440112, 2.6071051862, 0.2427753866}, {40.7827964482, 2.8550939879, 0.2585152441}, {41.7474645452, 3.1185187916, 0.2747071467}, {42.7076789310, 3.3977385614, 0.2913348822}, {43.6630557681, 3.6930872963, 0.3083810374}, {44.6131967530, 4.0048695712, 0.3258270465}, {45.5576907322, 4.3333600796, 0.3436532420}, {46.4961159599, 4.6788036343, 0.3618389091}, {47.4280405041, 5.0414142231, 0.3803623424}, {48.3530273485, 5.4213714610, 0.3992009063}, {49.2706345390, 5.8188214634, 0.4183310968}, {50.1804151837, 6.2338750665, 0.4377286064}, {51.0819205695, 6.6666076968, 0.4573683914}, {51.9747034604, 7.1170593704, 0.4772247403}, {52.8583191806, 7.5852346588, 0.4972713452}, {53.7323313848, 8.0711014359, 0.5174813739}, {54.5963121186, 8.5745918455, 0.5378275442}, {55.4498418183, 9.0956036128, 0.5582821984}, {56.2925126658, 9.6340000614, 0.5788173804}, {57.1239346241, 10.1896101127, 0.5994049120}, {57.9437346441, 10.7622291089, 0.6200164878}, {58.7515570936, 11.3516249669, 0.6406309339}, {59.5470586966, 11.9575472290, 0.6612453799}, {60.3299014116, 12.5797384137, 0.6818598260}, {61.0997525783, 13.2179341278, 0.7024742720}, {61.8562850547, 13.8718631753, 0.7230887181}, {62.5991773604, 14.5412476760, 0.7437031641}, {63.3281138104, 15.2258031812, 0.7643176102}, {64.0427846498, 15.9252387953, 0.7849320562}, {64.7428861868, 16.6392573008, 0.8055465023}, {65.4281209192, 17.3675552814, 0.8261609483}, {66.0981976638, 18.1098232546, 0.8467753944}, {66.7528316777, 18.8657458005, 0.8673898404}, {67.3917447803, 19.6350016972, 0.8880042865}, {68.0146654723, 20.4172640571, 0.9086187325}, {68.6213290486, 21.2122004646, 0.9292331786}, {69.2114777143, 22.0194731201, 0.9498476246}, {69.7848610908, 22.8387387046, 0.9704596363}, {70.3412448951, 23.6696435130, 0.9910488666}, {70.8804236474, 24.5118139194, 1.0115870256}, {71.4022249152, 25.3648596954, 1.0320459270}, {71.9065103813, 26.2283765121, 1.0523976026}, {72.3931758437, 27.1019459401, 1.0726143799}, {72.8621518604, 27.9851388725, 1.0926689580}, {73.3134052872, 28.8775166765, 1.1125344827}, {73.7469386997, 29.7786352160, 1.1321846208}, {74.1627903319, 30.6880492306, 1.1515936324}, {74.5610340765, 31.6053123358, 1.1707364420}, {74.9417794850, 32.5299770231, 1.1895887073}, {75.3051705443, 33.4615988916, 1.2081268867}, {75.6513863516, 34.3997392900, 1.2263283039}, {75.9806389139, 35.3439665490, 1.2441712100}, {76.2931709662, 36.2938597430, 1.2616348444}, {76.5892559719, 37.2490086901, 1.2786994908}, {76.8691981228, 38.2090139525, 1.2953465326}, {77.1333292913, 39.1734894447, 1.3115585034}, {77.3820083828, 40.1420647309, 1.3273191357}, {77.6156188501, 41.1143849026, 1.3426134051}, {77.8345650346, 42.0901123803, 1.3574275722}, {78.0392721661, 43.0689269138, 1.3717492205}, {78.2301863626, 44.0505255821, 1.3855672900}, {78.4077707142, 45.0346233936, 1.3988721084}, {78.5725037209, 46.0209545884, 1.4116554172}, {78.7248770616, 47.0092715816, 1.4239103949}, {78.8653914540, 47.9993447762, 1.4356316752}, {78.9945566547, 48.9909625633, 1.4468153624}, {79.1128914592, 49.9839313225, 1.4574590420}, {79.2209197763, 50.9780744024, 1.4675617868}, {79.3191687167, 51.9732322727, 1.4771241604}, {79.4081668295, 52.9692611746, 1.4861482147}, {79.4884402258, 53.9660316010, 1.4946374848}, {79.5605125788, 54.9634282963, 1.5025969794}, {79.6249051235, 55.9613502561, 1.5100331663}, {79.6821332319, 56.9597089249, 1.5169539554}, {79.7327045714, 57.9584274858, 1.5233686764}, {79.7771178067, 58.9574397752, 1.5292880530}, {79.8158593563, 59.9566883540, 1.5347241740}, {79.8494033925, 60.9561245076, 1.5396904592}, {79.8782118413, 61.9557082459, 1.5442016230}, {79.9027316588, 62.9554065705, 1.5482736336}, {79.9233932408, 63.9551924170, 1.5519236692}, {79.9406095538, 64.9550441169, 1.5551700704}, {79.9547736506, 65.9549438384, 1.5580322898}, {79.9662586708, 66.9548775860, 1.5605308386}, {79.9754178406, 67.9548352009, 1.5626872297}, {79.9825825226, 68.9548092428, 1.5645239188}, {79.9880609132, 69.9547940794, 1.5660642423}, {79.9921376222, 70.9547858560, 1.5673323532}, {79.9950720160, 71.9547816717, 1.5683531544}, {79.9970982182, 72.9547795785, 1.5691522300}, {79.9984251091, 73.9547785820, 1.5697557753}, {79.9992352211, 74.9547782217, 1.5701905238}, {79.9996837438, 75.9547781080, 1.5704836745}, {79.9998986042, 76.9547781040, 1.5706628162}, {79.9999797198, 77.9547781213, 1.5707558520}, {79.9999989983, 78.9547781203, 1.5707909221}, {80.0000003379, 79.9547781099, 1.5707963264}, {80.0000000000, 80.0000000156, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class FV90: public Trajectory {
  public:
    FV90(bool mirror = false) : Trajectory(true), mirror(mirror) {}
    const float velocity = 727.3894181373090f;
  private:
    bool mirror;
    virtual int size() const {
      return 109;
    }
    virtual Position position(int index) const {
      static const float data[109 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999997, 0.0000023506, 0.0000094017}, {1.9999999979, 0.0000374720, 0.0000751646}, {2.9999999885, 0.0001901015, 0.0002534044}, {3.9999998959, 0.0006005576, 0.0005997473}, {4.9999994192, 0.0014641117, 0.0011690879}, {5.9999982082, 0.0030308871, 0.0020153497}, {6.9999949704, 0.0056042636, 0.0031912511}, {7.9999870967, 0.0095403560, 0.0047480754}, {8.9999705436, 0.0152445527, 0.0067354478}, {9.9999386708, 0.0231707540, 0.0092011193}, {10.9998818286, 0.0338206246, 0.0121907589}, {11.9997846787, 0.0477401620, 0.0157477546}, {12.9996257458, 0.0655178823, 0.0199130248}, {13.9993766666, 0.0877798904, 0.0247248402}, {14.9989995499, 0.1151895133, 0.0302186567}, {15.9984453051, 0.1484447395, 0.0364269619}, {16.9976499965, 0.1882741082, 0.0433791328}, {17.9965346585, 0.2354324284, 0.0511013086}, {18.9950030547, 0.2906960327, 0.0596162766}, {19.9929386885, 0.3548626025, 0.0689433730}, {20.9902017708, 0.4287454453, 0.0790983987}, {21.9866265842, 0.5131704972, 0.0900935509}, {22.9820213578, 0.6089682424, 0.1019373694}, {23.9761649433, 0.7169708885, 0.1146346999}, {24.9688049077, 0.8380112887, 0.1281866727}, {25.9596550780, 0.9729148441, 0.1425906979}, {26.9483947255, 1.1224963261, 0.1578404764}, {27.9346683994, 1.2875506081, 0.1739260277}, {28.9180838797, 1.4688515348, 0.1908337331}, {29.8982121489, 1.6671488430, 0.2085463952}, {30.8745883455, 1.8831598913, 0.2270433122}, {31.8467117726, 2.1175653616, 0.2463003688}, {32.8140470631, 2.3710020789, 0.2662901407}, {33.7760251083, 2.6440628078, 0.2869820140}, {34.7320468168, 2.9372908041, 0.3083423186}, {35.6814869516, 3.2511747375, 0.3303344746}, {36.6236942754, 3.5861437163, 0.3529191519}, {37.5579968813, 3.9425643165, 0.3760544409}, {38.4837047518, 4.3207402909, 0.3996960351}, {39.4001191316, 4.7209078970, 0.4237974243}, {40.3065358841, 5.1432340012, 0.4483100967}, {41.2022466394, 5.5878148474, 0.4731837502}, {42.0865483106, 6.0546756152, 0.4983665111}, {42.9587469158, 6.5437704941, 0.5238051605}, {43.8181687564, 7.0549824983, 0.5494453655}, {44.6641619087, 7.5881253816, 0.5752319156}, {45.4960988641, 8.1429455204, 0.6011089637}, {46.3133892064, 8.7191230421, 0.6270208367}, {47.1154757620, 9.3162839895, 0.6529348182}, {47.9018199327, 9.9340273711, 0.6788487997}, {48.6718936907, 10.5719383741, 0.7047627812}, {49.4251799335, 11.2295886429, 0.7306767627}, {50.1611728322, 11.9065365677, 0.7565907442}, {50.8793781698, 12.6023275802, 0.7825047257}, {51.5793136738, 13.3164944590, 0.8084187072}, {52.2605093394, 14.0485576428, 0.8343326887}, {52.9225077459, 14.7980255538, 0.8602466702}, {53.5648643636, 15.5643949266, 0.8861606517}, {54.1871478522, 16.3471511468, 0.9120746332}, {54.7889403498, 17.1457685957, 0.9379886147}, {55.3698375239, 17.9597111741, 0.9639020628}, {55.9294573239, 18.7884282899, 0.9897916471}, {56.4674653680, 19.6313347410, 1.0156032674}, {56.9835929267, 20.4878126099, 1.0412809671}, {57.4776393126, 21.3572169321, 1.0667693727}, {57.9494719019, 22.2388759111, 1.0920139346}, {58.3990282304, 23.1320998691, 1.1169611649}, {58.8263182548, 24.0361860079, 1.1415588696}, {59.2314224103, 24.9504286602, 1.1657563766}, {59.6144914613, 25.8741232027, 1.1895047555}, {59.9757461851, 26.8065667909, 1.2127570313}, {60.3154748644, 27.7470678498, 1.2354683884}, {60.6340324713, 28.6949493837, 1.2575963657}, {60.9318339595, 29.6495565040, 1.2791010417}, {61.2093532502, 30.6102579965, 1.2999452083}, {61.4671218065, 31.5764473078, 1.3200945322}, {61.7057219587, 32.5475490384, 1.3395177052}, {61.9257839874, 33.5230200190, 1.3581865798}, {62.1279773117, 34.5023520119, 1.3760762920}, {62.3130098103, 35.4850720275, 1.3931653697}, {62.4816245809, 36.4707426069, 1.4094358256}, {62.6345918429, 37.4589637704, 1.4248732363}, {62.7727045787, 38.4493717566, 1.4394668045}, {62.8967706128, 39.4416379261, 1.4532094059}, {63.0076124271, 40.4354687547, 1.4660976210}, {63.1060618530, 41.4306042665, 1.4781317490}, {63.1929538537, 42.4268168904, 1.4893158072}, {63.2691206732, 43.4239081547, 1.4996575132}, {63.3353866515, 44.4217063995, 1.5091682515}, {63.3925680765, 45.4200666926, 1.5178630235}, {63.4414667912, 46.4188673618, 1.5257603829}, {63.4828666280, 47.4180081851, 1.5328823544}, {63.5175270841, 48.4174062000, 1.5392543379}, {63.5461807556, 49.4169941371, 1.5449049981}, {63.5695328631, 50.4167201193, 1.5498661396}, {63.5882552725, 51.4165438032, 1.5541725685}, {63.6029844789, 52.4164350328, 1.5578619410}, {63.6143164909, 53.4163707299, 1.5609745991}, {63.6228057912, 54.4163342507, 1.5635533955}, {63.6289645571, 55.4163149627, 1.5656435067}, {63.6332580734, 56.4163055617, 1.5672922365}, {63.6361036317, 57.4163015830, 1.5685488100}, {63.6378674259, 58.4163000814, 1.5694641593}, {63.6388642581, 59.4162994881, 1.5700907020}, {63.6393567931, 60.4162993471, 1.5704821128}, {63.6395528018, 61.4162993285, 1.5706930900}, {63.6396049784, 62.4162993323, 1.5707791172}, {63.6396102143, 63.4162993295, 1.5707962221}, {63.6396103068, 63.6396103192, 1.5707963268},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class F135: public Trajectory {
  public:
    F135(bool mirror = false) : Trajectory(true), mirror(mirror) {}
    const float velocity = 696.1377127029085f;
    const float straight1 = 20.0f;
    const float straight2 = 12.279220588080669f;
  private:
    bool mirror;
    virtual int size() const {
      return 133;
    }
    virtual Position position(int index) const {
      static const float data[133 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999996, 0.0000026816, 0.0000107254}, {1.9999999972, 0.0000427627, 0.0000857421}, {2.9999999851, 0.0002168729, 0.0002890357}, {3.9999998648, 0.0006849750, 0.0006839823}, {4.9999992686, 0.0016696802, 0.0013330472}, {5.9999976960, 0.0034559545, 0.0022974879}, {6.9999934478, 0.0063893357, 0.0036370632}, {7.9999832006, 0.0108746656, 0.0054097490}, {8.9999617125, 0.0173724036, 0.0076714628}, {9.9999205387, 0.0263982480, 0.0104757981}, {10.9998469018, 0.0385207364, 0.0138737697}, {11.9997209221, 0.0543585350, 0.0179135709}, {12.9995154015, 0.0745756872, 0.0226403449}, {13.9991936080, 0.0998785353, 0.0280959700}, {14.9987073472, 0.1310149525, 0.0343188608}, {15.9979928194, 0.1687686604, 0.0413437852}, {16.9969686165, 0.2139560798, 0.0492016998}, {17.9955349899, 0.2674187793, 0.0579196021}, {18.9935693855, 0.3300226225, 0.0675204027}, {19.9909241128, 0.4026533262, 0.0780228164}, {20.9874218246, 0.4862108962, 0.0894412728}, {21.9828551139, 0.5816021138, 0.1017858481}, {22.9769838688, 0.6897354435, 0.1150622174}, {23.9695319957, 0.8115199000, 0.1292716271}, {24.9601851463, 0.9478561612, 0.1444108896}, {25.9485892984, 1.0996319421, 0.1604723980}, {26.9343506002, 1.2677118395, 0.1774441627}, {27.9170332556, 1.4529361403, 0.1953098680}, {28.8961595216, 1.6561153380, 0.2140489497}, {29.8712109333, 1.8780224828, 0.2336366929}, {30.8416283407, 2.1193855671, 0.2540443495}, {31.8068138526, 2.3808820523, 0.2752392750}, {32.7661316010, 2.6631378985, 0.2971850830}, {33.7189139598, 2.9667189084, 0.3198418188}, {34.6644642382, 3.2921268390, 0.3431661490}, {35.6020580086, 3.6397927796, 0.3671115675}, {36.5309500953, 4.0100762737, 0.3916286164}, {37.4503792594, 4.4032626526, 0.4166651213}, {38.3595784742, 4.8195579986, 0.4421664388}, {39.2577757741, 5.2590884975, 0.4680757169}, {40.1442015070, 5.7218992343, 0.4943341645}, {41.0180955572, 6.2079542504, 0.5208813310}, {41.8787183299, 6.7171365062, 0.5476553939}, {42.7253563779, 7.2492494556, 0.5745934523}, {43.5573237397, 7.8040196686, 0.6016318259}, {44.3739749571, 8.3810982524, 0.6287072584}, {45.1747030171, 8.9800753710, 0.6557845961}, {45.9589207600, 9.6005117985, 0.6828619338}, {46.7260532977, 10.2419527109, 0.7099392715}, {47.4755383182, 10.9039279277, 0.7370166091}, {48.2068262715, 11.5859520742, 0.7640939468}, {48.9193809717, 12.2875250768, 0.7911712845}, {49.6126800196, 13.0081325866, 0.8182486222}, {50.2862152442, 13.7472464153, 0.8453259599}, {50.9394927990, 14.5043246408, 0.8724032976}, {51.5720337024, 15.2788121724, 0.8994806352}, {52.1833741824, 16.0701411593, 0.9265579729}, {52.7730661461, 16.8777315830, 0.9536353106}, {53.3406772476, 17.7009913450, 0.9807126483}, {53.8857913155, 18.5393168372, 1.0077899860}, {54.4080086569, 19.3920933660, 1.0348673237}, {54.9069464963, 20.2586958629, 1.0619446614}, {55.3822390538, 21.1384890078, 1.0890219990}, {55.8335378401, 22.0308277411, 1.1160993367}, {56.2605119442, 22.9350577462, 1.1431766744}, {56.6628483867, 23.8505162089, 1.1702540121}, {57.0402522329, 24.7765320457, 1.1973313498}, {57.3924467557, 25.7124262879, 1.2244086875}, {57.7191737191, 26.6575126969, 1.2514860251}, {58.0201936084, 27.6110984564, 1.2785633628}, {58.2952857751, 28.5724845825, 1.3056407005}, {58.5442485060, 29.5409661598, 1.3327180382}, {58.7668992643, 30.5158330833, 1.3597953759}, {58.9630748173, 31.4963706427, 1.3868727136}, {59.1326313737, 32.4818601276, 1.4139500512}, {59.2754446077, 33.4715789681, 1.4410273889}, {59.3914098105, 34.4648015025, 1.4681047266}, {59.4804419604, 35.4607995066, 1.4951820643}, {59.5424757997, 36.4588429462, 1.5222594020}, {59.5774658444, 37.4582000871, 1.5493367397}, {59.5853864374, 38.4581382062, 1.5764140773}, {59.5662317766, 39.4579241127, 1.6034914150}, {59.5200159014, 40.4568249827, 1.6305687527}, {59.4467726935, 41.4541085024, 1.6576460904}, {59.3465558529, 42.4490434291, 1.6847234281}, {59.2194388560, 43.4409003364, 1.7118007658}, {59.0655148884, 44.4289521252, 1.7388781035}, {58.8848992602, 45.4124748443, 1.7659452601}, {58.6777570529, 46.3907556470, 1.7929492304}, {58.4443334305, 47.3630993830, 1.8198260209}, {58.1849510436, 48.3288420136, 1.8465122425}, {57.9000073182, 49.2873562580, 1.8729454117}, {57.5899735685, 50.2380526603, 1.8990642478}, {57.2553887702, 51.1803894919, 1.9248089637}, {56.8968557247, 52.1138769457, 1.9501215505}, {56.5150314975, 53.0380836038, 1.9749460529}, {56.1106263787, 53.9526373487, 1.9992288353}, {55.6843984218, 54.8572277113, 2.0229188364}, {55.2371461427, 55.7516106362, 2.0459678123}, {54.7697000722, 56.6356081017, 2.0683305655}, {54.2829169107, 57.5091087531, 2.0899651597}, {53.7776783984, 58.3720676322, 2.1108331193}, {53.2548817130, 59.2245053615, 2.1308996118}, {52.7154349296, 60.0665067687, 2.1501336140}, {52.1602483774, 60.8982157039, 2.1685080590}, {51.5902335530, 61.7198345709, 2.1859999647}, {51.0062989577, 62.5316207872, 2.2025905437}, {50.4093437423, 63.3338827587, 2.2182652916}, {49.8002534036, 64.1269726684, 2.2330140569}, {49.1798963060, 64.9112818739, 2.2468310886}, {48.5491231496, 65.6872398443, 2.2597150638}, {47.9087620975, 66.4553057876, 2.2716690938}, {47.2596167974, 67.2159642518, 2.2827007098}, {46.6024631659, 67.9697156046, 2.2928218263}, {45.9380489328, 68.7170749169, 2.3020486852}, {45.2670921823, 69.4585669251, 2.3104017783}, {44.5902791107, 70.1947188986, 2.3179057499}, {43.9082627020, 70.9260539348, 2.3245892798}, {43.2216615740, 71.6530860622, 2.3304849469}, {42.5310597837, 72.3763193681, 2.3356290743}, {41.8370051952, 73.0962403702, 2.3400615570}, {41.1400087434, 73.8133145787, 2.3438256719}, {40.4405429410, 74.5279803059, 2.3469678724}, {39.7390416905, 75.2406478591, 2.3495375673}, {39.0358994822, 75.9516966928, 2.3515868866}, {38.3314702722, 76.6614708624, 2.3531704331}, {37.6260663847, 77.3702765612, 2.3543450232}, {36.9199577195, 78.0783799652, 2.3551694170}, {36.2133716365, 78.7860069883, 2.3557040388}, {35.5064916866, 79.4933405216, 2.3560106899}, {34.7994569914, 80.2005193898, 2.3561522554}, {34.0923617781, 80.9076377346, 2.3561924046}, {33.6827201455, 81.3172798545, 2.3561944902},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

class C180: public Trajectory {
  public:
    C180(bool mirror = false) : Trajectory(true), mirror(mirror) {}
    //    const float velocity = 818.9712224905114f;
    const float velocity = 760.0f;
    const float straight = 20.0f;
  private:
    bool mirror;
    virtual int size() const {
      return 191;
    }
    virtual Position position(int index) const {
      static const float data[191 + 1][3] = {
        {0.0000000000, 0.0000000000, 0.0000000000}, {0.9999999998, 0.0000016470, 0.0000065875}, {1.9999999990, 0.0000262522, 0.0000526730}, {2.9999999944, 0.0001332080, 0.0001776188}, {3.9999999485, 0.0004209695, 0.0004205163}, {4.9999996771, 0.0010266349, 0.0008200521}, {5.9999990692, 0.0021259453, 0.0014143745}, {6.9999975291, 0.0039324188, 0.0022409633}, {7.9999937068, 0.0066972203, 0.0033365004}, {8.9999854980, 0.0107073946, 0.0047367440}, {9.9999696427, 0.0162844551, 0.0064764061}, {10.9999412278, 0.0237843833, 0.0085890331}, {11.9998930995, 0.0335967507, 0.0111068903}, {12.9998142768, 0.0461424254, 0.0140608517}, {13.9996899115, 0.0618728975, 0.0174802934}, {14.9995009771, 0.0812666272, 0.0213929931}, {15.9992221938, 0.1048288724, 0.0258250345}, {16.9988219864, 0.1330912862, 0.0308007179}, {17.9982593336, 0.1666078907, 0.0363424766}, {18.9974833324, 0.2059550595, 0.0424707998}, {19.9964331438, 0.2517261823, 0.0492041625}, {20.9950353235, 0.3045306372, 0.0565589617}, {21.9932031697, 0.3649937596, 0.0645494605}, {22.9908338543, 0.4337525985, 0.0731877388}, {23.9878070408, 0.5114545709, 0.0824836520}, {24.9839848840, 0.5987525521, 0.0924447968}, {25.9792106620, 0.6963017278, 0.1030764858}, {26.9733062007, 0.8047595939, 0.1143817286}, {27.9660714004, 0.9247834040, 0.1263612216}, {28.9572823406, 1.0570250151, 0.1390133460}, {29.9466912574, 1.2021291436, 0.1523341729}, {30.9340263638, 1.3607271068, 0.1663174770}, {31.9189900517, 1.5334366719, 0.1809547579}, {32.9012589608, 1.7208610737, 0.1962352694}, {33.8804844455, 1.9235820779, 0.2121460563}, {34.8562925519, 2.1421596805, 0.2286719990}, {35.8282841200, 2.3771250921, 0.2457958653}, {36.7960361904, 2.6289797526, 0.2634983697}, {37.7591013292, 2.8981952056, 0.2817582393}, {38.7170118617, 3.1852077370, 0.3005522875}, {39.6692809336, 3.4904166093, 0.3198554930}, {40.6154025111, 3.8141800461, 0.3396410861}, {41.5548545554, 4.1568131680, 0.3598806404}, {42.4871008755, 4.5185879931, 0.3805441705}, {43.4115954518, 4.8997316903, 0.4016002351}, {44.3277870743, 5.3004229119, 0.4230160449}, {45.2351193441, 5.7207920822, 0.4447575750}, {46.1330327603, 6.1609199684, 0.4667896821}, {47.0209716173, 6.6208376659, 0.4890762250}, {47.8983851150, 7.1005266491, 0.5115801885}, {48.7647356625, 7.5999182129, 0.5342638111}, {49.6194993577, 8.1188942579, 0.5570887139}, {50.4621663898, 8.6572892540, 0.5800160333}, {51.2922490334, 9.2148903346, 0.6030065537}, {52.1092852186, 9.7914384484, 0.6260212591}, {52.9128363116, 10.3866372548, 0.6490373987}, {53.7024765543, 11.0001713839, 0.6720535382}, {54.4777876531, 11.6317158299, 0.6950696777}, {55.2383590196, 12.2809361399, 0.7180858172}, {55.9837877703, 12.9474884147, 0.7411019567}, {56.7136792304, 13.6310197983, 0.7641180963}, {57.4276465418, 14.3311679667, 0.7871342358}, {58.1253111153, 15.0475616178, 0.8101503753}, {58.8063034177, 15.7798212947, 0.8331665148}, {59.4702629712, 16.5275593852, 0.8561826544}, {60.1168383537, 17.2903801224, 0.8791987939}, {60.7456871986, 18.0678795843, 0.9022149334}, {61.3564761951, 18.8596456940, 0.9252310729}, {61.9488814969, 19.6652587505, 0.9482472124}, {62.5225895624, 20.4842923275, 0.9712633520}, {63.0772961294, 21.3163119780, 0.9942794915}, {63.6127073043, 22.1608768689, 1.0172956310}, {64.1285396327, 23.0175398804, 1.0403117705}, {64.6245200995, 23.8858476052, 1.0633279101}, {65.1003861290, 24.7653403489, 1.0863440496}, {65.5558855846, 25.6555521300, 1.1093601891}, {65.9907768636, 26.5560108723, 1.1323763286}, {66.4048297930, 27.4662400411, 1.1553924681}, {66.7978248561, 28.3857569208, 1.1784086077}, {67.1695537753, 29.3140741522, 1.2014247472}, {67.5198197165, 30.2507001859, 1.2244408867}, {67.8484372884, 31.1951392813, 1.2474570262}, {68.1552325430, 32.1468915076, 1.2704731658}, {68.4400429756, 33.1054527430, 1.2934893053}, {68.7027175277, 34.0703146883, 1.3165054448}, {68.9431170593, 35.0409664628, 1.3395215843}, {69.1611142354, 36.0168936790, 1.3625377238}, {69.3565934951, 36.9975788799, 1.3855538634}, {69.5294513082, 37.9825026664, 1.4085700029}, {69.6795961751, 38.9711436982, 1.4315861424}, {69.8069486269, 39.9629786930, 1.4546022819}, {69.9114412257, 40.9574824269, 1.4776184215}, {69.9930185637, 41.9541277345, 1.5006345610}, {70.0516373406, 42.9523863889, 1.5236507005}, {70.0872665603, 43.9517299044, 1.5466668400}, {70.0998873644, 44.9516282352, 1.5696829795}, {70.0894930725, 45.9515516600, 1.5926991191}, {70.0560891845, 46.9509708357, 1.6157152586}, {69.9996933808, 47.9493567967, 1.6387313981}, {69.9203355223, 48.9461809559, 1.6617475376}, {69.8180576505, 49.9409151037, 1.6847636772}, {69.6929139489, 50.9330317435, 1.7077798167}, {69.5449706393, 51.9220058363, 1.7307959562}, {69.3743062397, 52.9073128775, 1.7538120957}, {69.1810112054, 53.8884307088, 1.7768282352}, {68.9651878786, 54.8648398556, 1.7998443748}, {68.7269504889, 55.8360235271, 1.8228605143}, {68.4664251529, 56.8014676166, 1.8458766538}, {68.1837498744, 57.7606607008, 1.8688927933}, {67.8790745277, 58.7130940914, 1.8919089329}, {67.5525603540, 59.6582635874, 1.9149250724}, {67.2043804909, 60.5956681929, 1.9379412119}, {66.8347195442, 61.5248109561, 1.9609573514}, {66.4437732808, 62.4451998168, 1.9839734909}, {66.0317486289, 63.3563476073, 2.0069896305}, {65.5988636782, 64.2577720515, 2.0300057700}, {65.1453476796, 65.1489957660, 2.0530219095}, {64.6714410452, 66.0295462589, 2.0760380490}, {64.1773948229, 66.8989569316, 2.0990541886}, {63.6634706765, 67.7567674115, 2.1220703281}, {63.1299411964, 68.6025227734, 2.1450864676}, {62.5770890088, 69.4357750032, 2.1681026071}, {62.0052067695, 70.2560830089, 2.1911187466}, {61.4145971635, 71.0630126210, 2.2141348862}, {60.8055729054, 71.8561365921, 2.2371510257}, {60.1784567390, 72.6350345974, 2.2601671652}, {59.5335811288, 73.3992936131, 2.2831833047}, {58.8712873739, 74.1485091713, 2.3061994443}, {58.1919267905, 74.8822839241, 2.3292155838}, {57.4958593702, 75.6002290602, 2.3522317233}, {56.7834536369, 76.3019644696, 2.3752478628}, {56.0550866473, 76.9871187426, 2.3982640023}, {55.3111439904, 77.6553291706, 2.4212801419}, {54.5520197880, 78.3062417455, 2.4442962814}, {53.7781166460, 78.9395112053, 2.4673124209}, {52.9898445080, 79.5548021038, 2.4903285604}, {52.1876207795, 80.1517886577, 2.5133447000}, {51.3718704182, 80.7301546383, 2.5363599920}, {50.5430293841, 81.2896009091, 2.5593545370}, {49.7015594509, 81.8298641026, 2.5822896887}, {48.8479457095, 82.3507267102, 2.6051262046}, {47.9826926852, 82.8520187484, 2.6278251809}, {47.1063243378, 83.3336177585, 2.6503481863}, {46.2193792986, 83.7954497699, 2.6726573937}, {45.3224073462, 84.2374915793, 2.6947157102}, {44.4159640609, 84.6597696287, 2.7164869045}, {43.5006054540, 85.0623598342, 2.7379357315}, {42.5768879684, 85.4453875855, 2.7590280529}, {41.6453669258, 85.8090271789, 2.7797309549}, {40.7065886310, 86.1535003997, 2.8000128608}, {39.7610904500, 86.4790761240, 2.8198436400}, {38.8093945686, 86.7860656106, 2.8391947109}, {37.8520073755, 87.0748221631, 2.8580391394}, {36.8894193754, 87.3457409953, 2.8763517311}, {35.9221010306, 87.5992544168, 2.8941091183}, {34.9505009955, 87.8358316180, 2.9112898398}, {33.9750446812, 88.0559723696, 2.9278744147}, {32.9961330604, 88.2602044105, 2.9438454096}, {32.0141426668, 88.4490834486, 2.9591874981}, {31.0294252917, 88.6231903697, 2.9738875134}, {30.0423062473, 88.7831256330, 2.9879344939}, {29.0530853260, 88.9295078251, 3.0013197206}, {28.0620375005, 89.0629670362, 3.0140367471}, {27.0694129251, 89.1841446978, 3.0260814215}, {26.0754371369, 89.2936929476, 3.0374519011}, {25.0803127436, 89.3922676080, 3.0481486584}, {24.0842192260, 89.4805281034, 3.0581744795}, {23.0873162224, 89.5591307441, 3.0675344548}, {22.0897441053, 89.6287272658, 3.0762359612}, {21.0916239818, 89.6899648287, 3.0842886369}, {20.0930598177, 89.7434820785, 3.0917043481}, {19.0941399543, 89.7899058664, 3.0984971489}, {18.0949389903, 89.8298486824, 3.1046832321}, {17.0955200271, 89.8639049547, 3.1102808743}, {16.0959346694, 89.8926510491, 3.1153103729}, {15.0962236579, 89.9166442716, 3.1197939764}, {14.0964200758, 89.9364179144, 3.1237558080}, {13.0965493222, 89.9524813287, 3.1272217826}, {12.0966316869, 89.9653157582, 3.1302195180}, {11.0966826033, 89.9753739344, 3.1327782403}, {10.0967126858, 89.9830800065, 3.1349286828}, {9.0967294792, 89.9888264799, 3.1367029813}, {8.0967381311, 89.9929732922, 3.1381345630}, {7.0967421390, 89.9958458507, 3.1392580323}, {6.0967438928, 89.9977339104, 3.1401090515}, {5.0967446748, 89.9988915745, 3.1407242188}, {4.0967449079, 89.9995366103, 3.1411409420}, {3.0967449619, 89.9998483630, 3.1413973108}, {2.0967449572, 89.9999679410, 3.1415319652}, {1.0967449535, 89.9999974067, 3.1415839635}, {0.0967449589, 89.9999997477, 3.1415926476}, { -0.0000000167, 90.0000000000, 3.1415926536},
      };
      Position ret;
      if (index < 0) {
        ret = Position(0 + interval * index, 0, 0);
      } else if (index > size() - 1) {
        Position end(data[size()][0], data[size()][1], data[size()][2]);
        ret = end + Position((index - size()) * interval * cos(end.theta), (index - size()) * interval * sin(end.theta), 0);
      } else {
        ret = Position(data[index][0], data[index][1], data[index][2]);
      }
      if (mirror)
        return ret.mirror_x();
      return ret;
    }
};

#define MOVE_ACTION_TASK_PRIORITY   3
#define MOVE_ACTION_STACK_SIZE      8192

#define MOVE_ACTION_PERIOD          1000

class MoveAction: TaskBase {
  public:
    MoveAction() : TaskBase("Move Action", MOVE_ACTION_TASK_PRIORITY, MOVE_ACTION_STACK_SIZE) {
      xLastWakeTime = xTaskGetTickCount();
    }
    virtual ~MoveAction() {}
    enum ACTION {
      START_STEP, START_INIT, GO_STRAIGHT, GO_HALF, TURN_LEFT_90, TURN_RIGHT_90, TURN_BACK, RETURN, STOP,
    };
    enum FAST_ACTION : char {
      FAST_GO_STRAIGHT = 's',
      FAST_GO_HALF = 'x',
      FAST_DIAGONAL_LEFT = 'w',
      FAST_DIAGONAL_RIGHT = 'W',
      FAST_TURN_LEFT_45 = 'z',
      FAST_TURN_RIGHT_45 = 'c',
      FAST_TURN_LEFT_45R = 'Z',
      FAST_TURN_RIGHT_45R = 'C',
      FAST_TURN_LEFT_90 = 'L',
      FAST_TURN_RIGHT_90 = 'R',
      FAST_TURN_LEFT_V90 = 'q',
      FAST_TURN_RIGHT_V90 = 'e',
      FAST_TURN_LEFT_135 = 'a',
      FAST_TURN_RIGHT_135 = 'd',
      FAST_TURN_LEFT_135R = 'A',
      FAST_TURN_RIGHT_135R = 'D',
      FAST_TURN_LEFT_180 = 'Q',
      FAST_TURN_RIGHT_180 = 'E',
    };
    struct Operation {
      enum ACTION action;
      int num;
    };
    const char* action_string(enum ACTION action) {
      static const char name[][32] =
      { "start_step", "start_init", "go_straight", "go_half", "turn_left_90", "turn_right_90", "turn_back", "return", "stop", };
      return name[action];
    }
    void enable() {
      printf("Move Action Enabled\n");
      delete_task();
      create_task();
    }
    void disable() {
      delete_task();
      sc.disable();
      while (q.size()) {
        q.pop();
      }
      path = "";
    }
    void set_action(FAST_ACTION action, const int num = 1) {
      for (int i = 0; i < num; i++)
        path += (char)action;
    }
    void set_action(enum ACTION action, int num = 1) {
      struct Operation operation;
      operation.action = action;
      operation.num = num;
      q.push(operation);
    }
    void set_path(String path) {
      this->path = path;
    }
    String get_last_path() {
      return last_path;
    }
    int actions() const {
      return q.size() + path.length();
    }
    void waitForEnd() const {
      while (actions()) {
        delay(1);
      }
    }
    void printPosition(const char* name) const {
      printf("%s\t", name);
      //    printf("Ori:(%06.1f, %06.1f, %06.3f)\t", origin.x, origin.y, origin.theta);
      //    printf("Abs:(%06.1f, %06.1f, %06.3f)\t", sc.getPosition().x, sc.getPosition().y,
      //        sc.getPosition().theta);
      printf("Rel:(%06.1f, %06.1f, %06.3f)\t", getRelativePosition().x, getRelativePosition().y, getRelativePosition().theta);
      printf("\n");
    }
    Position getRelativePosition() const {
      return (sc.getPosition() - origin).rotate(-origin.theta);
    }
    void updateOrigin(Position passed) {
      origin += passed.rotate(origin.theta);
    }
    //    void setPosition(Position pos = Position(SEGMENT_WIDTH / 2, WALL_THICKNESS / 2 + MACHINE_TAIL_LENGTH, M_PI / 2)) {
    void setPosition(Position pos = Position(0, 0, 0)) {
      origin = pos;
      sc.getPosition() = pos;
    }
    void fixPosition(Position pos) {
      sc.getPosition() -= pos;
    }
  private:
    portTickType xLastWakeTime;
    float fast_speed;
    float integral;
    Position origin;
    std::queue<struct Operation> q;
    String path, last_path;
    //    Timer timer;

    void wall_avoid() {
#if WALL_AVOID_ENABLED
      const float gain = WALL_AVOID_GAIN;
      if (wd.wall().side[0]) {
        fixPosition(Position(0, wd.wall_difference().side[0] * gain * sc.actual.trans, 0).rotate(origin.theta));
      }
      if (wd.wall().side[1]) {
        fixPosition(Position(0, -wd.wall_difference().side[1] * gain * sc.actual.trans, 0).rotate(origin.theta));
      }
#endif
    }
    void wall_attach() {
#if WALL_ATTACH_ENABLED
      if (wd.wall().front[0] && wd.wall().front[1]) {
        while (1) {
          float trans = (wd.wall_difference().front[0] + wd.wall_difference().front[1]) * 100;
          float rot = (wd.wall_difference().front[1] - wd.wall_difference().front[0]) * 50;
          if (fabs(trans) < 5.0f && fabs(rot) < 0.5f) break;
          sc.set_target(trans, rot);
          vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        }
        sc.set_target(0, 0);
        printPosition("1");
        //        fixPosition(Position(getRelativePosition().x, 0, getRelativePosition().theta).rotate(origin.theta));
        fixPosition(Position(getRelativePosition().x, 0, 0).rotate(origin.theta));
        printPosition("2");
        bz.play(Buzzer::SELECT);
        delay(1000);
      }
#endif
    }
    void turn(const float angle) {
      const float speed = 3 * M_PI;
      const float accel = 48 * M_PI;
      const float back_gain = 100.0f;
      uint32_t ms = 0;
      while (1) {
        if (fabs(sc.actual.rot) > speed) break;
        float delta = getRelativePosition().x * cos(-getRelativePosition().theta) - getRelativePosition().y * sin(-getRelativePosition().theta);
        if (angle > 0) {
          sc.set_target(-delta * back_gain, ms / 1000.0f * accel);
        } else {
          sc.set_target(-delta * back_gain, -ms / 1000.0f * accel);
        }
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        ms++;
      }
      while (1) {
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        if (fabs(sc.actual.rot) < 0.1) break;
        float extra = angle - getRelativePosition().theta;
        float target_speed = sqrt(2 * accel * fabs(extra));
        float delta = getRelativePosition().x * cos(-getRelativePosition().theta) - getRelativePosition().y * sin(-getRelativePosition().theta);
        target_speed = (target_speed > speed) ? speed : target_speed;
        if (extra > 0) {
          sc.set_target(-delta * back_gain, target_speed);
        } else {
          sc.set_target(-delta * back_gain, -target_speed);
        }
      }
      updateOrigin(Position(0, 0, angle));
    }
    void straight_x(const float distance, const float v_max, const float v_end, bool avoid, bool suction) {
      const float accel = 6000;
      const float decel = 6000;
      uint32_t ms = 0;
      float v_start = sc.actual.trans;
      float T = 1.5f * (v_max - v_start) / accel;
      while (1) {
        Position cur = getRelativePosition();
        if (v_end >= 1.0f && cur.x > distance - 10.0f) break;
        if (v_end < 1.0f && cur.x > distance - 1.0f) break;
        float extra = distance - cur.x;
        float velocity_a = v_start + (v_max - v_start) * 6.0f * (-1.0f / 3 * pow(ms / 1000.0f / T, 3) + 1.0f / 2 * pow(ms / 1000.0f / T, 2));
        float velocity_d = sqrt(2 * decel * fabs(extra) + v_end * v_end);
        float velocity = v_max;
        if (velocity > velocity_d) velocity = velocity_d;
        if (ms / 1000.0f < T && velocity > velocity_a) velocity = velocity_a;
        int look_ahead = LOOK_AHEAD_UNIT;
        float theta = atan2f(-cur.y, 2 * look_ahead) - cur.theta;
        integral += theta;
        sc.set_target(velocity, TRAJECTORY_PROP_GAIN * theta + integral * TRAJECTORY_INT_GAIN);
        if (avoid) wall_avoid();
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        ms++;
      }
      sc.set_target(v_end, 0);
      updateOrigin(Position(distance, 0, 0));
    }
    template<class C>
    void trace(C tr, const float velocity) {
      while (1) {
        if (tr.getRemain() < -5.0f) break;
        vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
        Position dir = tr.getNextDir(getRelativePosition(), velocity);
        integral += dir.theta;
        sc.set_target(velocity, TRAJECTORY_PROP_GAIN * dir.theta + integral * TRAJECTORY_INT_GAIN);
      }
      sc.set_target(velocity, 0);
      updateOrigin(tr.getEndPosition());
    }
    virtual void task() {
      if (path.length() > 0) {
        fastRun();
      } else {
        searchRun();
      }
      while (1) {
        delay(1000);
      }
    }
    void searchRun() {
      const float velocity = 200;
      const float ahead_length = 5.0f;
      integral = 0;
      sc.enable();
      while (1) {
        while (q.empty()) {
          vTaskDelayUntil(&xLastWakeTime, 1 / portTICK_RATE_MS);
          S90 tr;
          Position cur = getRelativePosition();
          const float decel = 6000;
          float extra = tr.straight - ahead_length - cur.x;
          float v = sqrt(2 * decel * fabs(extra));
          if (v > velocity) v = velocity;
          if (extra < 0) v = -v;
          float theta = atan2f(-cur.y, LOOK_AHEAD_UNIT * 2) - cur.theta;
          integral += theta;
          sc.set_target(v, TRAJECTORY_PROP_GAIN * theta + integral * TRAJECTORY_INT_GAIN);
          wall_avoid();
        }
        struct Operation operation = q.front();
        enum ACTION action = operation.action;
        int num = operation.num;
        printf("%s: %d\n", action_string(action), num);
        printPosition("Start");
        switch (action) {
          case START_STEP:
            setPosition();
            straight_x(SEGMENT_WIDTH - MACHINE_TAIL_LENGTH - WALL_THICKNESS / 2 + ahead_length, velocity, velocity, true, false);
            break;
          case START_INIT:
            straight_x(SEGMENT_WIDTH / 2 - ahead_length, velocity, 0, true, false);
            wall_attach();
            turn(M_PI / 2);
            wall_attach();
            turn(M_PI / 2);
            for (int i = 0; i < 160; i++) {
              sc.set_target(-i, -getRelativePosition().theta * 100.0f);
              delay(1);
            }
            delay(200);
            sc.disable();
            mt.drive(-60, -60);
            delay(400);
            mt.free();
            while (q.size()) {
              q.pop();
            }
            return;
          case GO_STRAIGHT:
            straight_x(SEGMENT_WIDTH * num, velocity, velocity, true, false);
            break;
          case GO_HALF:
            straight_x(SEGMENT_WIDTH / 2 * num, velocity, velocity, true, false);
            break;
          case TURN_LEFT_90:
            for (int i = 0; i < num; i++) {
              S90 tr(false);
              straight_x(tr.straight - ahead_length, velocity, tr.velocity, true, false);
              trace(tr, tr.velocity);
              straight_x(tr.straight + ahead_length, tr.velocity, velocity, true, false);
            }
            break;
          case TURN_RIGHT_90:
            for (int i = 0; i < num; i++) {
              S90 tr(true);
              straight_x(tr.straight - ahead_length, velocity, tr.velocity, true, false);
              trace(tr, tr.velocity);
              straight_x(tr.straight + ahead_length, tr.velocity, velocity, true, false);
            }
            break;
          case TURN_BACK:
            straight_x(SEGMENT_WIDTH / 2 - ahead_length, velocity, 0, true, false);
            if (mpu.angle.z > 0) {
              wall_attach();
              turn(-M_PI / 2);
              wall_attach();
              turn(-M_PI / 2);
            } else {
              wall_attach();
              turn(M_PI / 2);
              wall_attach();
              turn(M_PI / 2);
            }
            straight_x(SEGMENT_WIDTH / 2 + ahead_length, velocity, 0, true, false);
            break;
          case RETURN:
            if (mpu.angle.z > 0) {
              wall_attach();
              turn(-M_PI / 2);
              wall_attach();
              turn(-M_PI / 2);
            } else {
              wall_attach();
              turn(M_PI / 2);
              wall_attach();
              turn(M_PI / 2);
            }
            break;
          case STOP:
            straight_x(SEGMENT_WIDTH / 2 - ahead_length, velocity, 0, true, false);
            wall_attach();
            break;
        }
        q.pop();
        printPosition("End");
      }
    }
    void fastRun() {
      if (path[0] != 'x' && path[0] != 'c' && path[0] != 'z') {
        path = "x" + path + "x";
      }

      printf("Path: %s\n", path.c_str());
      path.replace("s", "xx");
      path.replace("L", "ll");
      path.replace("R", "rr");

      path.replace("rllllr", "rlqlr");
      path.replace("lrrrrl", "lrerl");

      path.replace("xllr", "zlr");
      path.replace("xrrl", "crl");
      path.replace("lrrx", "lrC");
      path.replace("rllx", "rlZ");

      path.replace("xllllr", "alr");
      path.replace("xrrrrl", "drl");
      path.replace("rllllx", "rlA");
      path.replace("lrrrrx", "lrD");

      path.replace("xllllx", "Q");
      path.replace("xrrrrx", "E");

      path.replace("rllr", "rlwlr");
      path.replace("lrrl", "lrWrl");

      path.replace("rl", "");
      path.replace("lr", "");
      path.replace("xrrx", "R");
      path.replace("xllx", "L");
      printf("Path: %s\n", path.c_str());

      const float v_max = 900;
      const float curve_gain = 0.5f;
      integral = 0;
      sc.enable(true);
      setPosition();
      printPosition("S");
      int path_index = 0;
      float straight = SEGMENT_WIDTH / 2 - MACHINE_TAIL_LENGTH - WALL_THICKNESS / 2;
      fan.drive(0.4);
      delay(500);
      while (1) {
        if (path_index > (int) path.length() - 1)
          break;
        switch (path[path_index]) {
          case FAST_TURN_LEFT_45: {
              F45 tr(false);
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                //                straight_x(straight, v_max, tr.velocity * curve_gain, true, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_45: {
              F45 tr(true);
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                //                straight_x(straight, v_max, tr.velocity * curve_gain, true, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_45R: {
              F45 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
            }
            break;
          case FAST_TURN_RIGHT_45R: {
              F45 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
            }
            break;
          case FAST_TURN_LEFT_V90: {
              FV90 tr(false);
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
            }
            break;
          case FAST_TURN_RIGHT_V90: {
              FV90 tr(true);
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
            }
            break;
          case FAST_TURN_LEFT_90: {
              F90 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                //                straight_x(straight, v_max, tr.velocity * curve_gain, true, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_90: {
              F90 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                //                straight_x(straight, v_max, tr.velocity * curve_gain, true, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_LEFT_135: {
              F135 tr(false);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                //                straight_x(straight, v_max, tr.velocity * curve_gain, true, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_RIGHT_135: {
              F135 tr(true);
              straight += tr.straight1;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                //                straight_x(straight, v_max, tr.velocity * curve_gain, true, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight2;
            }
            break;
          case FAST_TURN_LEFT_135R: {
              F135 tr(false);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_RIGHT_135R: {
              F135 tr(true);
              straight += tr.straight2;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight1;
            }
            break;
          case FAST_TURN_LEFT_180: {
              C180 tr(false);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                //                straight_x(straight, v_max, tr.velocity * curve_gain, true, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight;
            }
            break;
          case FAST_TURN_RIGHT_180: {
              C180 tr(true);
              straight += tr.straight;
              if (straight > 1.0f) {
                straight_x(straight, v_max, tr.velocity * curve_gain, false, true);
                //                straight_x(straight, v_max, tr.velocity * curve_gain, true, true);
                straight = 0;
              }
              trace(tr, tr.velocity * curve_gain);
              straight += tr.straight;
            }
            break;
          case FAST_GO_STRAIGHT:
            straight += SEGMENT_WIDTH;
            break;
          case FAST_GO_HALF:
            straight += SEGMENT_WIDTH / 2;
            break;
          case FAST_DIAGONAL_LEFT:
          case FAST_DIAGONAL_RIGHT:
            straight += SEGMENT_DIAGONAL_WIDTH / 2;
            break;
        }
        path_index++;
      }
      fan.drive(0);

      printPosition("E");
      if (straight > 1.0f) {
        straight_x(straight, v_max, 0, false, true);
        //                straight_x(straight, v_max, 0, true, true);
        straight = 0;
      }
      printPosition("E");
      wall_attach();
      sc.set_target(0, 0);
      delay(100);
      sc.disable();
      last_path = path;
      path = "";
      printPosition("E");
      bz.play(Buzzer::COMPLETE);
    }
};

extern MoveAction ma;

